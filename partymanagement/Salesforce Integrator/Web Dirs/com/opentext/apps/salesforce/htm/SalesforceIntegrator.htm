<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="../../../../../thirdparty/bootstrap/css/bootstrap.min.css">
    </link>
    <link rel="stylesheet" href="../css/appscommon.css">
    </link>
    <script src="../../../../../thirdparty/jquery/jquery.js" type="text/javascript"></script>
    <script src="../../../../../html5/cordys.html5sdk.js" type="text/javascript"></script>
    <script src="../../../../../thirdparty/knockout/knockout.js" type="text/javascript"></script>
    <script src="../../../../../thirdparty/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="../../../../../com/opentext/apps/utils/js/translationsUtil.js" type="text/javascript"></script>
    <script src="../js/appscommon.js"></script>
    <title data-translatable="true">Salesforce integrator</title>
    <style>
        .salesforce-action-container,
        .salesforce-modal-bar {
            background-color: #f5f5f5;
            border-bottom: 1px #ccc solid;
            height: 50px;
            padding: 12px;
        }

        .salesforce-heading-container {
            color: #333333;
            background-color: #ffffff;
            font-size: 24px;
            font-weight: normal;
            border-bottom: 1px #dcdcdc solid;
            text-overflow: ellipsis;
            display: block;
            height: 2.5em;
            line-height: 2.5em;
            padding: 0 1.2rem;
        }

        .salesforce-content-container {
            padding: 15px;
            margin-right: auto;
            margin-left: auto;
            clear: both;
        }

        .salesforce-btn-primary {
            color: #ffffff;
            background-color: #414979;
            border-radius: 1em;
            font-size: 1em;
            line-height: 0.75em;
            padding-left: 1.5em;
            padding-right: 1.5em;
            height: 2em;
            border-color: #414979;
        }

        .salesforce-btn-secondary {
            border-color: #414979;
            border-radius: 1em;
            background-color: #ffffff;
            color: #414979;
            font-size: 1em;
            line-height: 0.75em;
            padding-left: 1.5em;
            padding-right: 1.5em;
            height: 2em;
        }

        .salesforce-action-container .btn+.btn {
            margin-right: 1rem;
        }

        .salesforce-required-props:before {
            content: "*";
            padding-right: 0.2em;
            color: red;
        }

        .salesforce-label {
            display: block;
            max-width: 100%;
            margin-bottom: 5px;
        }

        .salesforce-modal-bar {
            border-top: 1px #ccc solid;
        }
    </style>
    <script type="text/javascript">
        $.cordys.json.defaults.removeNamespacePrefix = true;
        var CONFIGURATION_ID = null;
        var IS_SAVED = false;

        var ERROR_TOKEN_GENERATION = "An error occurred while generating the access token. Verify the entered details."

        var ERROR_LOAD_CONFIG = "An error occurred while retrieving the configurations. Contact the administrator.";

        var ERROR_DELETE_CONFIG = "An error occurred while clearing the configurations. Contact the administrator.";
        var SUCCESS_DELETE_CONFIG = "Configurations cleared.";

        var ERROR_CREATE_CONFIG = "An error occurred while saving the configurations. Contact the administrator.";
        var SUCCESS_CREATE_CONFIG = "Configurations saved.";

        var ERROR_UPDATE_CONFIG = "An error occurred while updating the configurations. Contact the administrator.";
        var SUCCESS_UPDATE_CONFIG = "Configurations updated.";

        var ERROR_SYNC_ACCOUNTS = "An error occurred while synchronizing the external parties. Contact the administrator.";
        var SUCCESS_SYNC_ACCOUNTS = "Synched the external parties.";

        var ERROR_SYNC_CONTACTS = "An error occurred while synchronizing the external contacts. Contact the administrator.";
        var SUCCESS_SYNC_CONTACTS = "Synched the external contacts.";

        var ERROR_TEST_CONFIG = "Test connection failed.";
        var SUCCESS_TEST_CONFIG = "Test connection successful.";


        var ConfiguratoinModel = function () {
            var self = this;
            self.username = ko.observable();
            self.password = ko.observable();
            self.clientId = ko.observable();
            self.clientSecret = ko.observable();
            self.appURL = ko.observable();
            self.apiVersion = ko.observable();
        };

        $(function () {
            var i_locale = getlocale();
            var rtl_css = '../../../../../com/opentext/apps/utils/css/rtlappscommon.css';
            translateLabels("com/opentext/apps/accountmanagement/Salesforce/Salesforce", i_locale, true);
            loadRTLIfRequired(i_locale, rtl_css);

            // registerMenuCloseFunction();

            //Loading salesforce properties
            loadsalesforceProperties();

            //Adding action methods            
            $('#action-testconnection').click(salesforceActionTestConnection);
            $('#action-confirm-delete').click(salesforceActionDelete);
            $('#action-confirm-update').click(salesforceActionCreateAndUpdate);
            $('#external_parties_model_ok').click(sync_accounts);
            $('#external_contacts_model_ok').click(sync_contacts);
            $('#action-create').click(salesforceActionCreateAndUpdate);
            $('#username, #password, #clientid,#app_url,#client_secret,#api_version').change(validateProps);
            $('#username, #password, #clientid,#app_url,#client_secret,#api_version').change(enableUpdate);
        });

        function translatePlaceHolders() {
            if (document.getElementById("username") != null)
                document.getElementById("username").placeholder = getTranslationMessage("User name");
            if (document.getElementById("password") != null)
                document.getElementById("password").placeholder = getTranslationMessage("Password");
            if (document.getElementById("clientid") != null)
                document.getElementById("clientid").placeholder = getTranslationMessage("Username");
            if (document.getElementById("client_secret") != null)
                document.getElementById("client_secret").placeholder = getTranslationMessage("Client secret");
            if (document.getElementById("api_version") != null)
                document.getElementById("api_version").placeholder = getTranslationMessage("v32.0");
            //if(document.getElementById("SI_SForceAdmin")!=null)
            //document.getElementById("SI_SForceAdmin").title="Salesforce administration";
        }

        function loadsalesforceProperties() {
            $.cordys.ajax({
                namespace: "http://schemas/OpenTextSalesforceIntegrator/SalesforceConfigurator/operations",
                method: "GetSalesforceConfiguration"
                , success: function (data) {
                    if (data.SalesforceConfigurator && data.SalesforceConfigurator.length) {
                        mapPropertiesToView(data.SalesforceConfigurator[0]);
                    } else {
                        mapPropertiesToView(data.SalesforceConfigurator);
                    }
                    data.SalesforceConfigurator !== undefined ? actionItems_Update() : actionItems_Create();
                }, error: function (error) {
                    notifyError(getTranslationMessage(ERROR_LOAD_CONFIG), 3000);
                    return false;
                }
            });
        }

        function mapPropertiesToView(configuration) {

            //Mapping username
            $('#username').val(configuration !== undefined ? configuration.Username : "");

            try {
                //Mapping client fields.
                //$('#password').val(atob(configuration !== undefined ? configuration.Password : ""));
                //$('#client_secret').val(atob(configuration !== undefined ? configuration.ClientSecret : ""));
            } catch (error) {
                //Mapping client fields.
                //$('#password').val(configuration !== undefined ? configuration.Password : "");
                //$('#client_secret').val(configuration !== undefined ? configuration.ClientSecret : "");
            }



            //Mapping Client ID
            $('#clientid').val(configuration !== undefined ? configuration.ClientId : "");

            //Mapping App URL
            $('#app_url').val(configuration !== undefined ? configuration.AppURL : "");

            //Mapping API version
            $('#api_version').val(configuration !== undefined ? configuration.APIVersion : "");

            CONFIGURATION_ID = configuration !== undefined ? configuration["SalesforceConfigurator-id"].Id : "";
        }

        function TestandSaveSalesforceConfig(config, isTestConfig) {
            $.cordys.ajax({
                namespace: "http://schemas.cordys.com/default",
                method: "TestandSaveSalesforceConfig",
                parameters: config,
                success: function (data) {
                    if (data && data.testConnFlag && data.testConnFlag.text == "SUCCESS") {
                        $('#password').val("");
                        $('#client_secret').val("");
                        if (isTestConfig) {
                            addToastDiv(getTranslationMessage(SUCCESS_TEST_CONFIG));
                            successToast(3000);
                        }
                        else if (data && data.createUpdateData && data.createUpdateData.UpdateSalesforceConfiguratorResponse) {
                            mapPropertiesToView(data.createUpdateData.UpdateSalesforceConfiguratorResponse.SalesforceConfigurator);
                            addToastDiv(getTranslationMessage(SUCCESS_UPDATE_CONFIG));
                            actionItems_Update();
                            successToast(3000);
                        }
                    } else {
                        notifyError(getTranslationMessage(ERROR_TEST_CONFIG), 3000);
                        actionItems_Create();
                        return false;
                    }
                },
                error: function (error) {
                    notifyError(getTranslationMessage(ERROR_TEST_CONFIG), 3000);
                    return false;
                }
            });

        }

        function salesforceActionTestConnection() {
            IS_SAVED = true;
            if (validateProps()) {
                var config = {
                    "userName": $('#username').val(),
                    "passwordB64": btoa($('#password').val()),
                    "clientID": $('#clientid').val(),
                    "clientSecretB64": btoa($('#client_secret').val()),
                    "appURL": $('#app_url').val(),
                    "apiVersion": $('#api_version').val(),
                    "isTestConn": "true"
                }
                TestandSaveSalesforceConfig(config, true);
            }
        }

        function salesforceActionDelete() {
            $.cordys.ajax({
                namespace: "http://schemas/OpenTextSalesforceIntegrator/SalesforceConfigurator/operations",
                method: "DeleteSalesforceConfigurator",
                parameters: {
                    "SalesforceConfigurator-id": {
                        Id: CONFIGURATION_ID
                    }
                }, success: function (data) {
                    loadsalesforceProperties();
                    IS_SAVED = false;
                    addToastDiv(getTranslationMessage(SUCCESS_DELETE_CONFIG));
                    successToast(3000);
                },
                error: function (error) {
                    notifyError(getTranslationMessage(ERROR_DELETE_CONFIG), 3000);
                    return false;
                }
            });
        }

        function salesforceActionCreateAndUpdate() {
            IS_SAVED = true;
            if (validateProps()) {
                var config = {
                    "userName": $('#username').val(),
                    "passwordB64": btoa($('#password').val()),
                    "clientID": $('#clientid').val(),
                    "clientSecretB64": btoa($('#client_secret').val()),
                    "appURL": $('#app_url').val(),
                    "apiVersion": $('#api_version').val(),
                    "isTestConn": "false",
                    "salesForceConfigID": CONFIGURATION_ID
                }
                TestandSaveSalesforceConfig(config, false);
            }
        }

        function getUsernameValueObj() {
            if (document.getElementById('username').value != "") {
                return document.getElementById('username').value;
            }
            else {
                return { '@xsi:nil': 'true' };
            }
        }
        function getPasswordValueObj() {
            if (document.getElementById('password').value != "") {
                return btoa(document.getElementById('password').value);
            }
            else {
                return { '@xsi:nil': 'true' };
            }
        }
        function getClientIDValueObj() {
            if (document.getElementById('clientid').value != "") {
                return document.getElementById('clientid').value;
            }
            else {
                return { '@xsi:nil': 'true' };
            }
        }
        function getClientSecretValueObj() {
            if (document.getElementById('client_secret').value != "") {
                return btoa(document.getElementById('client_secret').value);
            }
            else {
                return { '@xsi:nil': 'true' };
            }
        }
        function getAppURLValueObj() {
            if (document.getElementById('app_url').value != "") {
                return document.getElementById('app_url').value;
            }
            else {
                return { '@xsi:nil': 'true' };
            }
        }
        function getAPIVersionValueObj() {
            if (document.getElementById('api_version').value != "") {
                return document.getElementById('api_version').value;
            }
            else {
                return { '@xsi:nil': 'true' };
            }
        }

        function getConfigurationValueObj() {
            l_usernameObj = getUsernameValueObj();
            l_passwordObj = getPasswordValueObj();
            l_clientIDValueObj = getClientIDValueObj();
            l_clientSecretValueObj = getClientSecretValueObj();
            l_appURLValueObj = getAppURLValueObj();
            l_apiVersionValueObj = getAPIVersionValueObj();
            return configurationValueObj = {
                userName: l_usernameObj,
                passwordB64: l_passwordObj,
                clientID: l_clientIDValueObj,
                clientSecretB64: l_clientSecretValueObj,
                appURL: l_appURLValueObj,
                apiVersion: l_apiVersionValueObj,
                isTestConn: "false"
            };
        }

        function actionItems_Create() {
            $('#action-update, #action-delete, #action-testconnection').hide();
            $('#sync_accounts,#sync_contacts').attr("disabled", "disabled");
            $('#action-create').show();
        }

        function actionItems_Update() {
            IS_SAVED = true;
            $('#action-update, #action-delete, #action-testconnection').show();
            $('#action-update').attr('disabled', true);
            $('#sync_accounts,#sync_contacts').removeAttr("disabled");
            $('#action-create').hide();
        }

        function sync_accounts() {
            $.cordys.ajax({
                namespace: "http://schemas.cordys.com/apps/salesforceintegrator/19.2",
                method: "SyncAccountsFromSalesforce",
                success: function (data) {
                    addToastDiv(getTranslationMessage(SUCCESS_SYNC_ACCOUNTS));
                    successToast(3000);
                },
                error: function (error) {
                    notifyError(getTranslationMessage(ERROR_SYNC_ACCOUNTS), 3000);
                    return false;
                }
            });
        }

        function sync_contacts() {
            $.cordys.ajax({
                namespace: "http://schemas.cordys.com/apps/salesforceintegrator/19.2",
                method: "SyncContactsFromSalesforce",
                success: function (data) {
                    addToastDiv(getTranslationMessage(SUCCESS_SYNC_CONTACTS));
                    successToast(3000);
                },
                error: function (error) {
                    notifyError(getTranslationMessage(ERROR_SYNC_CONTACTS), 3000);
                    return false;
                }
            });
        }

        function validateProps() {
            if (!IS_SAVED) {
                return true;
            }


            var invalidProps = [];
            if ($('#username').val() == "") {
                $('#username').addClass("apps-error");
                invalidProps.push("User name");
            } else {
                $('#username').removeClass("apps-error");
            }

            if ($('#password').val() == "") {
                $('#password').addClass("apps-error");
                invalidProps.push("Password");
            } else {
                $('#password').removeClass("apps-error");
            }

            if ($('#clientid').val() == "") {
                $('#clientid').addClass("apps-error");
                invalidProps.push("Client ID");
            } else {
                $('#clientid').removeClass("apps-error");
            }

            if ($('#client_secret').val() == "") {
                $('#client_secret').addClass("apps-error");
                invalidProps.push("Client secret");
            } else {
                $('#client_secret').removeClass("apps-error");
            }

            if ($('#app_url').val() == "") {
                $('#app_url').addClass("apps-error");
                invalidProps.push("Application URL");
            } else if (!isUrlValid($('#app_url').val())) {
                invalidProps.push("FORMAT_ERROR#Application URL#URL");
            } else {
                $('#app_url').removeClass("apps-error");
            }

            if ($('#api_version').val() == "") {
                $('#api_version').addClass("apps-error");
                invalidProps.push("API version");
            } else {
                $('#api_version').removeClass("apps-error");
            }

            if (invalidProps.length == 1) {
                updateToastContent(contentText(invalidProps));
            } else if (invalidProps.length > 1) {
                updateToastContent(getTranslationMessage("{0} errors", invalidProps.length), contentText(invalidProps));
            } else {
                errorToastToggle("hide");
                $('.salesforce-config-actions button').prop('disabled', '');
                return true;
            }

            errorToastToggle("show");
            $('.salesforce-config-actions button').prop('disabled', 'disabled');
            return false;
        }

        function contentText(inValidList) {

            return inValidList.map(function (e, i) {
                if (e.startsWith("FORMAT_ERROR")) {
                    return getTranslationMessage("{0}: Enter a valid {1}.", getTranslationMessage(e.split("#")[1]), getTranslationMessage(e.split("#")[2]));
                } else {
                    return getTranslationMessage("{0}: Enter a value.", getTranslationMessage(e));
                }
            }).join("<br>");
        }

        function ValidateConfiguration(config) {
            $.cordys.ajax({
                namespace: "http://schemas.cordys.com/apps/salesforceintegrator/19.2",
                method: "ValidateConfiguration",
                parameters: config,
                success: function (data) {
                    if (data && data.tuple && data.tuple.old &&
                        data.tuple.old.validateConfiguration &&
                        data.tuple.old.validateConfiguration.validateConfiguration != 'false') {
                        addToastDiv(getTranslationMessage(SUCCESS_TEST_CONFIG));
                        successToast(3000);
                    } else {
                        notifyError(getTranslationMessage(ERROR_TEST_CONFIG), 3000);
                        return false;
                    }
                },
                error: function (error) {
                    notifyError(getTranslationMessage(ERROR_TEST_CONFIG), 3000);
                    return false;
                }
            });

        }

        function enableUpdate() {
            $('#action-update').attr('disabled', false);
        }

        function saveConfiguration() {
            var configurationObj = getConfigurationValueObj();
            $.cordys.ajax({
                namespace: "http://schemas/OpenTextSalesforceIntegrator/SalesforceConfigurator/operations",
                method: "GetSalesforceConfiguration"
                , success: function (data) {
                    if (data.SalesforceConfigurator) {

                        //Update config
                        $.cordys.ajax({
                            namespace: "http://schemas/OpenTextSalesforceIntegrator/SalesforceConfigurator/operations",
                            method: "UpdateSalesforceConfigurator",
                            parameters: {
                                "SalesforceConfigurator-id": {
                                    Id: CONFIGURATION_ID
                                },
                                "SalesforceConfigurator-update": configurationObj
                            },
                            success: function (data) {
                                if (data.SalesforceConfigurator) {
                                    mapPropertiesToView(data.SalesforceConfigurator);
                                    actionItems_Update();

                                    addToastDiv(getTranslationMessage(SUCCESS_UPDATE_CONFIG));
                                    successToast(3000);
                                } else {
                                    notifyError(getTranslationMessage(ERROR_UPDATE_CONFIG), 3000);
                                    actionItems_Create();
                                    return false;
                                }
                            },
                            error: function () {
                                notifyError(getTranslationMessage(ERROR_UPDATE_CONFIG), 3000);
                                return false;
                            }
                        });
                    } else {

                        //Create config
                        $.cordys.ajax({
                            namespace: "http://schemas/OpenTextSalesforceIntegrator/SalesforceConfigurator/operations",
                            method: "CreateSalesforceConfigurator",
                            parameters: {
                                "SalesforceConfigurator-create": configurationObj
                            },
                            success: function (data) {
                                if (data.SalesforceConfigurator) {
                                    mapPropertiesToView(data.SalesforceConfigurator);
                                    actionItems_Update();

                                    addToastDiv(getTranslationMessage(SUCCESS_CREATE_CONFIG));
                                    successToast(3000);
                                } else {
                                    notifyError(getTranslationMessage(ERROR_CREATE_CONFIG), 3000);
                                    actionItems_Create();
                                    return false;
                                }
                            },
                            error: function () {
                                notifyError(getTranslationMessage(ERROR_CREATE_CONFIG), 3000);
                                return false;
                            }
                        });
                    }
                }, error: function (error) {
                    notifyError(getTranslationMessage(ERROR_LOAD_CONFIG), 3000);
                    return false;
                }
            });
        }

        function isUrlValid(url) {
            return /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(url);
        }

        function registerMenuCloseFunction() {
            var iframe = $(this);
            if (iframe) {
                iframe.on("load", function () {
                    iframe.contents().click(function (event) {
                        iframe.trigger("click");
                    });
                });
                iframe.click(function () {
                    if (window.parent && window.parent.$('#homepages')) {
                        window.parent.$('#homepages').removeClass('open');
                    }
                });
            }
        }

    </script>
</head>

<body class="cc-ltr">
    <!--<div class="salesforce-heading-container">
        <div class="panel-header-title pull-left" id="SI_SForceAdmin"
            style="white-space: nowrap; max-width: calc(100% - 101.6px);" data-translatable="true">Salesforce administration</div>
    </div>-->
    <div class="salesforce-action-container salesforce-config-actions">
        <button id="sync_contacts" class="btn btn-primary salesforce-btn-primary pull-right" role="presentation"
            data-bind="visible: isVisible, css: { disabled: !enabledComputed() }" data-toggle="modal"
            data-target="#external_contacts_model"><span data-translatable="true">Sync external contacts</span></button>
        <button id="sync_accounts" class="btn btn-primary salesforce-btn-primary pull-right" role="presentation"
            data-bind="visible: isVisible, css: { disabled: !enabledComputed() }" data-toggle="modal"
            data-target="#external_parties_model"><span data-translatable="true">Sync external parties</span></button>
    </div>
    <div class="salesforce-content-container">
        <form>
            <div class="row">
                <div class="form-group col-lg-3 col-md-3 col-sm-3 rtl-float-right">
                    <label class="label-no-bold salesforce-required-props" for="username" data-translatable="true">User
                        name</label>
                    <input type="text" class="form-control" id="username">
                </div>
                <div class="form-group col-lg-3 col-md-3 col-sm-3 rtl-float-right">
                    <label class="label-no-bold salesforce-required-props" for="password"
                        data-translatable="true">Password</label>
                    <input type="password" class="form-control" id="password" autocomplete="off">
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-3 col-md-3 col-sm-3 rtl-float-right">
                    <label class="label-no-bold  salesforce-required-props" for="clientid"
                        data-translatable="true">Client ID</label>
                    <input type="text" class="form-control" id="clientid">
                </div>
                <div class="form-group col-lg-3 col-md-3 col-sm-3 rtl-float-right">
                    <label class="label-no-bold  salesforce-required-props" for="client_secret"
                        data-translatable="true">Client secret</label>
                    <input type="password" class="form-control" id="client_secret" autocomplete="off">
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-3 col-md-3 col-sm-3 rtl-float-right">
                    <label class="label-no-bold  salesforce-required-props" for="clientid" data-translatable="true">API
                        version</label>
                    <input type="text" class="form-control" id="api_version">
                </div>
                <div class="form-group col-lg-3 col-md-3 col-sm-3 rtl-float-right">
                    <label class="label-no-bold salesforce-required-props" for="app_url"
                        data-translatable="true">Application URL</label>
                    <input type="text" class="form-control" id="app_url">
                </div>
            </div>
        </form>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-6 rtl-float-right">
                <button id="action-testconnection" class="btn btn-secondary salesforce-btn-secondary"><span
                        data-translatable="true">Test connection</span></button>
                <button id="action-delete" class="btn btn-secondary salesforce-btn-secondary pull-right"
                    style="display: none;" data-toggle="modal" data-target="#confirmDelete"><span
                        data-translatable="true">Clear</span></button>
                <button id="action-update" class="btn btn-primary salesforce-btn-primary pull-right"
                    style="display: none;margin-right: 16px;" data-toggle="modal" data-target="#confirmUpdate"
                    disabled="disabled"><span data-translatable="true">Update</span></button>
                <button id="action-create" class="btn btn-primary salesforce-btn-primary pull-right"
                    style="display: none;"><span data-translatable="true">Save</span></button>
            </div>
        </div>
    </div>

    <!-- Error toast -->
    <div id="errorToast">
        <div id="toastHeading">
            <div id="headingContent" style="padding: 0px; font-size: 18px; color: rgba(33, 30, 30, 0.92);">
                <h4 style="float: left;padding-left: 1em;"><img src="../img/notification_error.svg" width="25px"
                        height="25px" align="middle" style="margin-right:5px;"></h4>
            </div> <span style="position: absolute; cursor: pointer; right: 1em; top: 1.3em; display: block;"
                id="arrowBtn" class="down" onclick="toggleErrorToastContent()"></span>
        </div>
        <div id="toastContent" style="display: none; clear: both;">
            <div class="horizontal-rule"></div>
            <div id="contentText" style="margin-top: 6px;padding-left: 6px" align="left"></div>
        </div>
    </div>

    <!-- Confirm update modal -->
    <div class="modal fade" id="confirmUpdate" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="salesforce-modal-bar">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"><span data-translatable="true">Update</span></h4>
                </div>
                <div class="modal-body">
                    <div class="salesforce-content-container">
                        <div class="apps-warning-msg"><span data-translatable="true">Are you sure you want to update the
                                settings?</span></div>
                    </div>
                </div>
                <div class="salesforce-modal-bar salesforce-action-container">
                    <button id="" class="btn btn-secondary salesforce-btn-secondary btn-ok pull-right"
                        data-dismiss="modal"><span data-translatable="true">Cancel</span></button>
                    <button id="action-confirm-update" class="btn btn-primary salesforce-btn-primary btn-ok pull-right"
                        data-dismiss="modal"><span data-translatable="true">OK</span></button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirm delete modal -->
    <div class="modal fade" id="confirmDelete" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="salesforce-modal-bar">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" data-translatable="true">Clear</h4>
                </div>
                <div class="modal-body">
                    <div class="salesforce-content-container">
                        <div class="apps-warning-msg" data-translatable="true">Are you sure you want to clear the
                            settings?</div>
                    </div>
                </div>
                <div class="salesforce-modal-bar salesforce-action-container">
                    <button class="btn btn-secondary salesforce-btn-secondary btn-ok pull-right"
                        data-dismiss="modal"><span data-translatable="true">Cancel</span></button>
                    <button id="action-confirm-delete" class="btn btn-primary salesforce-btn-primary btn-ok pull-right"
                        data-dismiss="modal"><span data-translatable="true">OK</span></button>
                </div>
            </div>
        </div>
    </div>
    <!-- Confirm update modal -->
    <div class="modal fade" id="external_contacts_model" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="salesforce-modal-bar">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" data-translatable="true">Warning</h4>
                </div>
                <div class="modal-body">
                    <div class="salesforce-content-container">
                        <div class="apps-warning-msg" data-translatable="true">Are you sure you want to retreive and
                            update external contacts from salesforce?</div>
                    </div>
                </div>
                <div class="salesforce-modal-bar salesforce-action-container">
                    <button id="" class="btn btn-secondary salesforce-btn-secondary btn-ok pull-right"
                        data-dismiss="modal"><span data-translatable="true">Cancel</span></button>
                    <button id="external_contacts_model_ok"
                        class="btn btn-primary salesforce-btn-primary btn-ok pull-right" data-dismiss="modal"><span
                            data-translatable="true">OK</span></button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="external_parties_model" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="salesforce-modal-bar">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" data-translatable="true">Warning</h4>
                </div>
                <div class="modal-body">
                    <div class="salesforce-content-container">
                        <div class="apps-warning-msg" data-translatable="true">Are you sure you want to retrieve and
                            update external parties from salesforce?</div>
                    </div>
                </div>
                <div class="salesforce-modal-bar salesforce-action-container">
                    <button id="" class="btn btn-secondary salesforce-btn-secondary btn-ok pull-right"
                        data-dismiss="modal"><span data-translatable="true">Cancel</span></button>
                    <button id="external_parties_model_ok"
                        class="btn btn-primary salesforce-btn-primary btn-ok pull-right" data-dismiss="modal"><span
                            data-translatable="true">OK</span></button>
                </div>
            </div>
        </div>
    </div>
</body>

</html>