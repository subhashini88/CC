/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.salesforceintegrator;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.ProtocolException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Base64;
import java.util.Base64.Decoder;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import com.eibus.util.UserProfile;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.query.Cursor;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.cordys.security.encryption.EncryptionException;
import com.cordys.util.NomUtil;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;
import com.eibus.xml.nom.Node;
import com.eibus.xml.nom.internal.NOMDocumentPool;
import com.opentext.apps.salesforceintegrator.exceptions.SalesforceAlertMessages;
import com.opentext.apps.salesforceintegrator.exceptions.SalesforceApplicationException;

public class SalesforceUtils extends SalesforceUtilsBase {

	private static final CordysLogger logger = CordysLogger.getCordysLogger(SalesforceUtils.class);
	private static String logger_indentifier = "com.opentext.apps.salesforceintegrator";

	public SalesforceUtils() {
		this((BusObjectConfig) null);
	}

	public SalesforceUtils(BusObjectConfig config) {
		super(config);
	}

	public static int fetchSalesforceAccounts(com.cordys.cpc.bsf.query.Cursor cursor) {

		Configurator sf_config = loadSalesforceConfiguration();
		HttpURLConnection sf_conn = null;
		InputStream is = null;
		try {
			sf_conn = (HttpURLConnection) new URL(sf_config.getAppURL() + "/services/data/" + sf_config.getAPIVersion()
					+ "/query?q=SELECT+Id,Name,AccountNumber,BillingCountry,Description,Type,MasterRecordId,Website+FROM+Account+LIMIT+"
					+ cursor.getMaxRows() + "+OFFSET+" + cursor.getPosition()).openConnection();
			sf_conn.setRequestMethod("GET");

			// Request header
			sf_conn.setRequestProperty("Accept", "application/xml");
			String token = getSalesforceAccessToken();
			if (Objects.nonNull(token) && !token.isEmpty()) {
				sf_conn.setRequestProperty("Authorization", "Bearer " + token);
			}
			sf_conn.setDoInput(true);
			sf_conn.setDoOutput(true);

			is = sf_conn.getInputStream();
			Document sf_sccountsResults = getDomXmlfromResponse(is);
			return NomUtil.convertToNom(sf_sccountsResults.getDocumentElement());

		} catch (ProtocolException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_ACCESS_TOKEN_PROTOCOL);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_ACCESS_TOKEN_PROTOCOL);
		} catch (IOException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_ACCESS_TOKEN_CONNECTION);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_ACCESS_TOKEN_CONNECTION);
		}

		finally {
			try {
				if (null != is)
					is.close();
				if (null != sf_conn)
					sf_conn.disconnect();
			} catch (IOException e) {
				logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
				throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
			}

		}
	}

	public static int fetchSalesforceContacts(com.cordys.cpc.bsf.query.Cursor cursor) {

		Configurator sf_config = loadSalesforceConfiguration();
		HttpURLConnection sf_conn = null;
		InputStream is = null;
		try {
			sf_conn = (HttpURLConnection) new URL(sf_config.getAppURL() + "/services/data/" + sf_config.getAPIVersion()
					+ "/query?q=SELECT+Id,Name,Title,FirstName,LastName,Birthdate,Email,Phone,MobilePhone,AccountId+FROM+Contact+LIMIT+"
					+ cursor.getMaxRows() + "+OFFSET+" + cursor.getPosition()).openConnection();

			sf_conn.setRequestMethod("GET");

			// Request header
			sf_conn.setRequestProperty("Accept", "application/xml");
			String token = getSalesforceAccessToken();
			if (Objects.nonNull(token) && !token.isEmpty()) {
				sf_conn.setRequestProperty("Authorization", "Bearer " + token);
			}
			sf_conn.setDoInput(true);
			sf_conn.setDoOutput(true);

			is = sf_conn.getInputStream();
			Document sf_contactsResults = getDomXmlfromResponse(is);
			return NomUtil.convertToNom(sf_contactsResults.getDocumentElement());
		} catch (ProtocolException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_ACCESS_TOKEN_PROTOCOL);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_ACCESS_TOKEN_PROTOCOL);
		} catch (IOException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_ACCESS_TOKEN_CONNECTION);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_ACCESS_TOKEN_CONNECTION);
		} finally {
			try {
				if (null != is)
					is.close();
				if (null != sf_conn)
					sf_conn.disconnect();
			} catch (IOException e) {
				logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
				throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
			}

		}
	}

	public static int fetchSalesforceContactsByAccountId(String AccountId, com.cordys.cpc.bsf.query.Cursor cursor) {

		Configurator sf_config = loadSalesforceConfiguration();
		HttpURLConnection sf_conn = null;
		InputStream is = null;
		try {
			sf_conn = (HttpURLConnection) new URL(sf_config.getAppURL() + "/services/data/" + sf_config.getAPIVersion()
					+ "/query?q=SELECT+Id,Name,Title,FirstName,LastName,Birthdate,Email,Phone,MobilePhone,AccountId+FROM+Contact+WHERE+Id+='"
					+ AccountId + "'+LIMIT+" + cursor.getMaxRows() + "+OFFSET+" + cursor.getPosition())
					.openConnection();
			sf_conn.setRequestMethod("GET");

			// Request header
			sf_conn.setRequestProperty("Accept", "application/xml");
			String token = getSalesforceAccessToken();
			if (Objects.nonNull(token) && !token.isEmpty()) {
				sf_conn.setRequestProperty("Authorization", "Bearer " + token);
			}
			sf_conn.setDoInput(true);
			sf_conn.setDoOutput(true);

			is = sf_conn.getInputStream();
			Document sf_contactsResults = getDomXmlfromResponse(is);
			return NomUtil.convertToNom(sf_contactsResults.getDocumentElement());

		} catch (ProtocolException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_ACCESS_TOKEN_PROTOCOL);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_ACCESS_TOKEN_PROTOCOL);
		} catch (IOException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_ACCESS_TOKEN_CONNECTION);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_ACCESS_TOKEN_CONNECTION);
		} finally {
			try {
				if (null != is)
					is.close();
				if (null != sf_conn)
					sf_conn.disconnect();
			} catch (IOException e) {
				logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
				throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
			}

		}
	}

	public static int fetchSalesforceAccountById(String AccountId) {

		Configurator sf_config = loadSalesforceConfiguration();
		HttpURLConnection sf_conn = null;
		InputStream is = null;
		try {
			sf_conn = (HttpURLConnection) new URL(sf_config.getAppURL() + "/services/data/" + sf_config.getAPIVersion()
					+ "/query?q=SELECT+Id,Name,AccountNumber,BillingCountry,Description,Type,MasterRecordId,Website+FROM+Account+WHERE+Id+='"
					+ AccountId + "'").openConnection();
			sf_conn.setRequestMethod("GET");

			// Request header
			sf_conn.setRequestProperty("Accept", "application/xml");
			String token = getSalesforceAccessToken();
			if (Objects.nonNull(token) && !token.isEmpty()) {
				sf_conn.setRequestProperty("Authorization", "Bearer " + token);
			}
			sf_conn.setDoInput(true);
			sf_conn.setDoOutput(true);

			is = sf_conn.getInputStream();
			Document sf_accountResult = getDomXmlfromResponse(is);
			return NomUtil.convertToNom(sf_accountResult.getDocumentElement());

		} catch (ProtocolException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_ACCESS_TOKEN_PROTOCOL);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_ACCESS_TOKEN_PROTOCOL);
		} catch (IOException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_ACCESS_TOKEN_CONNECTION);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_ACCESS_TOKEN_CONNECTION);
		} finally {
			try {
				if (null != is)
					is.close();
				if (null != sf_conn)
					sf_conn.disconnect();
			} catch (IOException e) {
				logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
				throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
			}

		}
	}

	public static String getSalesforceAccessToken() {
		String accessToken = "";
		Configurator config = loadSalesforceConfiguration();
		config.setAppURL(getAuthURL(config.getAppURL()));
		if (Objects.nonNull(config)) {
			accessToken = getSalesforceAccessToken(config);
		}
		return accessToken;
	}

	public static BusObjectIterator<com.opentext.apps.salesforceintegrator.SalesforceUtils> getSalesforceUtilsObjects(
			com.cordys.cpc.bsf.query.Cursor cursor) {
		// TODO implement body
		return null;
	}

	public static boolean validateConfiguration(String username, String password, String clientId, String clientSecret,
			String appURL) {
		Configurator config = new Configurator();

		Decoder decoder = Base64.getDecoder();
		String encodedString = null;
		config.setUsername(username);
		encodedString = isCorrectlyEncoded(password) ? new String(decoder.decode(password)) : password;
		config.setPassword(encodedString);
		encodedString = isCorrectlyEncoded(clientSecret) ? new String(decoder.decode(clientSecret)) : clientSecret;
		config.setClientSecret(encodedString);
		config.setClientID(clientId);
		String authURL = getAuthURL(appURL);
		config.setAppURL(authURL);
		HttpURLConnection conn = getConnection(config);
		try {
			if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
				return true;
			}
		} catch (IOException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_LOGIN_INFO_CONNECTION);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_LOGIN_INFO_CONNECTION);
		}
		return false;
	}

	private static String getSalesforceAccessToken(Configurator config) {

		String accessToken = "";
		HttpURLConnection conn = getConnection(config);
		InputStream is = null;
		try {
			if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
				is = conn.getInputStream();
				accessToken = getSalesforceAccessTokenFromResponse(is);
			} else {
				throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_LOGIN_INFO_CONNECTION);
			}

		} catch (IOException e) {
			logger._log(logger_indentifier, Severity.ERROR, e,
					SalesforceAlertMessages.ERROR_PROCESSING_RESPONSE_FOR_ACCESS_TOKEN);
			throw new SalesforceApplicationException(
					SalesforceAlertMessages.ERROR_PROCESSING_RESPONSE_FOR_ACCESS_TOKEN);
		} finally {
			try {
				is.close();
				conn.disconnect();
			} catch (IOException e) {
				logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
				throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
			}

		}

		return accessToken;
	}

	private static HttpURLConnection getConnection(Configurator config) {
		HttpURLConnection conn = null;
		OutputStream os = null;
		BufferedWriter writer = null;

		// Request body
		HashMap<String, String> authMap = new HashMap<String, String>();
		authMap.put("grant_type", "password");
		authMap.put("client_id", config.getClientID());
		authMap.put("client_secret", config.getClientSecret());
		authMap.put("username", config.getUsername());
		authMap.put("password", config.getPassword());

		try {
			conn = (HttpURLConnection) new URL(config.getAppURL()).openConnection();
			conn.setRequestMethod("POST");

			// Request header
			conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			conn.setRequestProperty("Accept", "application/xml");

			conn.setDoInput(true);
			conn.setDoOutput(true);

			os = conn.getOutputStream();

			writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));
			writer.write(getPostDataString(authMap, "auth"));

		} catch (UnsupportedEncodingException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_UNSUPPORTED_ENCODING);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_UNSUPPORTED_ENCODING);
		} catch (ProtocolException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_ACCESS_TOKEN_PROTOCOL);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_ACCESS_TOKEN_PROTOCOL);
		} catch (IOException e) {
			logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_ACCESS_TOKEN_CONNECTION);
			throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_ACCESS_TOKEN_CONNECTION);
		} finally {
			try {
				if (null != writer) {
					writer.flush();
					writer.close();
				}
				if (null != os) {
					os.close();
				}

			} catch (IOException e) {
				logger._log(logger_indentifier, Severity.ERROR, e, SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
				throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_RELEASING_RESOURCES);
			}
		}
		return conn;
	}

	public static String getSalesforceAccessTokenFromResponse(InputStream input) {
		Document parser = getDomXmlfromResponse(input);
		NodeList nodes = parser.getElementsByTagName("access_token");
		return nodes.item(0).getTextContent();
	}

	private static Configurator loadSalesforceConfiguration() {
		Configurator configurator = null;
		int response = 0;
		int nodes[] = null;
		try {
			SOAPRequestObject configuratorsRequest = new SOAPRequestObject(
					"http://schemas/OpenTextSalesforceIntegrator/SalesforceConfigurator/operations",
					"GetSalesforceConfiguration", null, null);

			response = configuratorsRequest.sendAndWait();
			nodes = GeneralUtils.getNodeList(".//SalesforceConfigurator", response);
			if (nodes.length != 0) {
				configurator = new Configurator();
				int i = nodes[0];

				Decoder decoder = Base64.getDecoder();
				String encodedString = null;

				configurator.setUsername(Node.getDataWithDefault(GeneralUtils.getNode(".//Username", i), null));
				encodedString = Node.getDataWithDefault(GeneralUtils.getNode(".//Password", i), null);
				// encodedString = isCorrectlyEncoded(encodedString) ? new
				// String(decoder.decode(encodedString)) : encodedString;
				encodedString = decryptDecode(configurator.getUsername(), encodedString);
				configurator.setPassword(encodedString);
				configurator.setClientID(Node.getDataWithDefault(GeneralUtils.getNode(".//ClientId", i), null));
				encodedString = Node.getDataWithDefault(GeneralUtils.getNode(".//ClientSecret", i), null);
				// encodedString = isCorrectlyEncoded(encodedString) ? new
				// String(decoder.decode(encodedString)) : encodedString;
				encodedString = decryptDecode(configurator.getClientID(), encodedString);
				configurator.setClientSecret(encodedString);
				configurator.setAppURL(Node.getDataWithDefault(GeneralUtils.getNode(".//AppURL", i), null));
				configurator.setAPIVerion(Node.getDataWithDefault(GeneralUtils.getNode(".//APIVersion", i), null));

			}
		} finally {
			if (null != nodes) {
				GeneralUtils.cleanAll(response);
			}
		}
		return configurator;
	}

	private static String getAuthURL(String dataWithDefault) {
		StringBuilder URL = new StringBuilder(dataWithDefault);
		if (Objects.nonNull(dataWithDefault)) {
			if (!dataWithDefault.endsWith("/")) {
				URL.append("/");
			}
			URL.append("services/oauth2/token");
		}
		return URL.toString();
	}

	private static String getPostDataString(HashMap<String, String> params, String type) {
		StringBuilder result = new StringBuilder();
		boolean first = true;
		for (Map.Entry<String, String> entry : params.entrySet()) {
			if ("auth".equalsIgnoreCase(type)) {
				if (first)
					first = false;
				else
					result.append("&");
				try {
					result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));
					result.append("=");
					result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));
				} catch (UnsupportedEncodingException e) {
					logger._log(logger_indentifier, Severity.ERROR, e,
							SalesforceAlertMessages.ERROR_UNSUPPORTED_ENCODING);
					throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_UNSUPPORTED_ENCODING);
				}
			}
		}
		return result.toString();
	}

	private static Document getDomXmlfromResponse(InputStream inputStream) {
		DocumentBuilderFactory newInstance = DocumentBuilderFactory.newInstance();
		newInstance.setNamespaceAware(true);
		try {
			newInstance.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
			return newInstance.newDocumentBuilder().parse(inputStream);
		} catch (SAXException | IOException | ParserConfigurationException e) {
			logger._log(logger_indentifier, Severity.ERROR, e,
					SalesforceAlertMessages.ERROR_PROCESSING_RESPONSE_FOR_ACCESS_TOKEN);
			throw new SalesforceApplicationException(
					SalesforceAlertMessages.ERROR_PROCESSING_RESPONSE_FOR_ACCESS_TOKEN);
		}
	}

	private static boolean isCorrectlyEncoded(final String encodedString) {
		if (Objects.isNull(encodedString)) {
			return false;
		}
		try {
			Base64.getDecoder().decode(encodedString);
		} catch (IllegalArgumentException e) {
			return false;
		}
		return true;
	}

	@SuppressWarnings("null")
	public static void syncAccountsFromSalesforce() {
		boolean stillAvailable = true;
		int batchSize = 50;
		int position = 0, createSfAcRequestResponse = 0;
		com.eibus.xml.nom.Document cursorDoc = null;
		cursorDoc = NOMDocumentPool.getInstance().lendDocument();
		try {
			Cursor newCursor = new Cursor(cursorDoc);
			newCursor.setPosition(position);
			newCursor.setMaxRows(batchSize);

			while (stillAvailable) {
				int accountsNode = fetchSalesforceAccounts(newCursor);
				int responseSize = Integer
						.parseInt(Node.getDataWithDefault(GeneralUtils.getNode(".//totalSize", accountsNode), null));

				SOAPRequestObject createSfAcRequest = new SOAPRequestObject("http://schemas.cordys.com/default",
						"CreateOrUpdateSFAccounts", null, null);
				createSfAcRequest.addParameterAsXml(accountsNode);
				try {
					createSfAcRequestResponse = createSfAcRequest.execute();
					if (responseSize < batchSize) {
						stillAvailable = false;
						break;
					} else {
						newCursor.setPosition(responseSize);
						newCursor.setMaxRows(batchSize);
						stillAvailable = true;
						continue;
					}

				} catch (Exception e) {
					logger._log(logger_indentifier, Severity.ERROR, e,
							"Error while trigerring CreateOrUpdateSFAccounts BPM");
					throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_WHILE_TRIGGERING_BPM,
							"CreateOrUpdateSFAccounts");
				} finally {
					GeneralUtils.cleanAll(createSfAcRequestResponse);
				}
			}
		} finally {
			if (cursorDoc != null) {
				NOMDocumentPool.getInstance().returnDocument(cursorDoc);
			}
		}
	}

	public static void syncContactsFromSalesforce() {

		boolean stillAvailable = true;
		int batchSize = 50;
		int position = 0, createSfCoRequestResponse = 0;
		com.eibus.xml.nom.Document cursorDoc = null;
		cursorDoc = NOMDocumentPool.getInstance().lendDocument();
		try {
			Cursor newCursor = new Cursor(cursorDoc);
			newCursor.setPosition(position);
			newCursor.setMaxRows(batchSize);

			while (stillAvailable) {
				int contactsNode = fetchSalesforceContacts(newCursor);
				int responseSize = Integer
						.parseInt(Node.getDataWithDefault(GeneralUtils.getNode(".//totalSize", contactsNode), null));

				SOAPRequestObject createSfCoRequest = new SOAPRequestObject("http://schemas.cordys.com/default",
						"SFContactsCreateOrUpdate", null, null);
				createSfCoRequest.addParameterAsXml(contactsNode);
				try {
					createSfCoRequestResponse = createSfCoRequest.execute();
					if (responseSize < batchSize) {
						stillAvailable = false;
						break;
					} else {
						newCursor.setPosition(responseSize);
						newCursor.setMaxRows(batchSize);
						stillAvailable = true;
						continue;
					}

				} catch (Exception e) {
					logger._log(logger_indentifier, Severity.ERROR, e, "Error while trigerring ContractDataImport BPM");
					throw new SalesforceApplicationException(SalesforceAlertMessages.ERROR_WHILE_TRIGGERING_BPM,
							"ContractDataImport");
				} finally {
					GeneralUtils.cleanAll(createSfCoRequestResponse);
				}
			}
		} finally {
			if (cursorDoc != null) {
				NOMDocumentPool.getInstance().returnDocument(cursorDoc);
			}
		}
	}

	public static String decodeBase64(String encoded) {
		try {
			String decoded = new String(Base64.getDecoder().decode(encoded));
			return decoded;
		} catch (EncryptionException e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, e.getMessage());
			return null;
		} catch (Exception e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, "An unexpected error occurred: " + e.getMessage());
			return null;
		}
	}

	public static String encryptEncode(String userName, String password, String isPassB64) {
		String encryptedResult;
		try {
			if (isPassB64.equals("true")) {
				String b64Decoded = decodeBase64(password);
				encryptedResult = UserProfile.encryptAndEncode(userName, b64Decoded);
			} else {
				encryptedResult = UserProfile.encryptAndEncode(userName, password);
			}
			return encryptedResult;
		} catch (EncryptionException e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, e.getMessage());
			return null;
		} catch (Exception e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, "An unexpected error occurred: " + e.getMessage());
			return null;
		}
	}

	public static String decryptDecode(String userName, String encryptedPassword) {
		try {
			String decryptedResult = UserProfile.decodeAndDecrypt(userName, encryptedPassword);
			return decryptedResult;
		} catch (EncryptionException e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, e.getMessage());
			return null;
		} catch (Exception e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, "An unexpected error occurred: " + e.getMessage());
			return null;
		}
	}

	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

}
