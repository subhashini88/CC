/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.gc.notifications;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Objects;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;

public class Utilities extends UtilitiesBase {

	final static String EMAIL_REGEX = "^[a-zA-Z0-9_+&*-]+(?:\\." + "[a-zA-Z0-9_+&*-]+)*@" + "(?:[a-zA-Z0-9-]+\\.)+[a-z"
			+ "A-Z]{2,7}$";

	public Utilities() {
		this((BusObjectConfig) null);
	}

	public Utilities(BusObjectConfig config) {
		super(config);
	}

	public static BusObjectIterator<com.opentext.apps.gc.notifications.Utilities> getUtilitiesObjects(
			com.cordys.cpc.bsf.query.Cursor cursor) {
		// TODO implement body
		return null;
	}

	public static String removeDuplicates(String emailList) {

		StringBuilder list = new StringBuilder();
		if (Objects.nonNull(emailList)) {
			emailList = emailList.replaceAll("\"", "");
			Set<String> emailSet = new HashSet<String>();
			for (String email : emailList.split(";")) {
				emailSet.add(email);
			}
			Iterator<String> emailIterator = emailSet.iterator();
				while (emailIterator.hasNext()) {
					String email = emailIterator.next();
					if (!email.isBlank()) {
						list.append("<address>");
						list.append(email);
						list.append("</address>");
					}
				}
		}
		return list.toString();
	}
	
	public static String removeDuplicateUserIds(String usersList)
    {
        if (Objects.nonNull(usersList)) {
			usersList = usersList.replaceAll("\"", "");
			Set<String> userSet = new HashSet<String>();
			for (String email : usersList.split(";")) {
				userSet.add(email);
			}
			return String.join(";", userSet);
		}
			
		return ";";	
    }

 	public static String updateNotificationMessage(String message, String generatedID,  String name)
    {
        if(Objects.nonNull(message)){
          message = message.replace("[@ID@]", generatedID);
          message = message.replace("[@Name@]", name);
		}
		return message;	
    }

	public static String parseToList(String additionalIds, String toList) {
		StringBuilder list = new StringBuilder();
		Set<String> emailSet = new HashSet<String>();
		for (String reg : toList.split(";")) {
			final Pattern pattern = Pattern.compile("<" + reg + "><Email>(.+?)</Email></" + reg + ">");
			final Matcher matcher = pattern.matcher(additionalIds);
			if (matcher.find()) {
				emailSet.add(matcher.group(1));
			}
		}
		Iterator<String> emailIterator = emailSet.iterator();
		while (emailIterator.hasNext()) {
			String email = emailIterator.next();
			if (!email.isEmpty()) {
				list.append(email);
				list.append(";");

			}

		}
		return list.toString();
	}

	public static String parseAdditoinalMailIds(org.w3c.dom.Element additionalIdsXML, String configuration) {
		StringBuilder list = new StringBuilder();
		Set<String> emailSet = new HashSet<String>();
		for (String reg : configuration.split(";")) {
			if (isValidMail(reg)) {
				emailSet.add(reg);
			} else {
				Pattern pattern = Pattern.compile("\\[@(.*?)@\\]", Pattern.DOTALL);
				Matcher matcher = pattern.matcher(reg);
				String tag = null;
				if (matcher.find()) {
					tag = matcher.group(1);
					if (Objects.nonNull(tag) && tag.length() > 0) {
						NodeList nodes = additionalIdsXML.getElementsByTagName(tag);
						for (int i = 0; i < nodes.getLength(); i++) {
							Element ele = (Element) nodes.item(i);
							NodeList emailNodes = ele.getElementsByTagName("Email");
							for (int j = 0; j < emailNodes.getLength(); j++) {
								String mailId = null;
								if (Objects.nonNull(emailNodes.item(j))
										&& Objects.nonNull(emailNodes.item(j).getFirstChild())) {
									mailId = emailNodes.item(j).getFirstChild().getNodeValue();
								}
								if (Objects.nonNull(mailId) && mailId.length() > 0 && isValidMail(mailId)) {
									emailSet.add(mailId);
								}
							}

						}

					}
				}
			}
		}

		Iterator<String> emailIterator = emailSet.iterator();
		while (emailIterator.hasNext()) {
			String email = emailIterator.next();
			if (!email.isEmpty()) {
				list.append(email);
				list.append(";");

			}
		}
		return list.toString();
	}

	private static boolean isValidMail(String email) {
		final Pattern emailPattern = Pattern.compile(EMAIL_REGEX);
		return emailPattern.matcher(email).matches();
	}
	
	public static String parseAdditoinalUserIds(org.w3c.dom.Element additionalIdsXML, String configuration) {
		StringBuilder userIdsString = new StringBuilder();
		Set<String> userIdSet = new HashSet<String>();
		for (String reg : configuration.split(";")) {			
			Pattern pattern = Pattern.compile("\\[@(.*?)@\\]", Pattern.DOTALL);
			Matcher matcher = pattern.matcher(reg);
			String tag = null;
			if (matcher.find()) {
				tag = matcher.group(1);
				if (Objects.nonNull(tag) && tag.length() > 0) {
					NodeList nodes = additionalIdsXML.getElementsByTagName(tag);
					for (int i = 0; i < nodes.getLength(); i++) {
						Element ele = (Element) nodes.item(i);
						NodeList emailNodes = ele.getElementsByTagName("UserId");
						for (int j = 0; j < emailNodes.getLength(); j++) {
							String userId = null;
							if (Objects.nonNull(emailNodes.item(j))
									&& Objects.nonNull(emailNodes.item(j).getFirstChild())) {
								userId = emailNodes.item(j).getFirstChild().getNodeValue();
							}
							if (Objects.nonNull(userId) && userId.length() > 0 ) {
								userIdSet.add(userId);
							}
						}
					}
				}
			}			
		}

		Iterator<String> userIdIterator = userIdSet.iterator();
		while (userIdIterator.hasNext()) {
			String usrId = userIdIterator.next();
			if (!usrId.isEmpty()) {
				userIdsString.append(usrId);
				userIdsString.append(";");

			}
		}
		return userIdsString.toString();
	}
	
	public static com.opentext.apps.gc.notifications.NotificationInstanceDetails parseAdditionalDetails(org.w3c.dom.Element AdditionlDetailsNode, String DetailsString)
    {
		NotificationInstanceDetails ldet = new NotificationInstanceDetails();

		Set<String> emailSet = new HashSet<String>();
		Set<String> userIdSet = new HashSet<String>();
		for (String reg : DetailsString.split(";")) {
			if (isValidMail(reg)) {
				emailSet.add(reg);
			} else {
				Pattern pattern = Pattern.compile("\\[@(.*?)@\\]", Pattern.DOTALL);
				Matcher matcher = pattern.matcher(reg);
				String tag = null;
				if (matcher.find()) {
					tag = matcher.group(1);
					if (Objects.nonNull(tag) && tag.length() > 0) {
						NodeList nodes = AdditionlDetailsNode.getElementsByTagName(tag);
						for (int i = 0; i < nodes.getLength(); i++) {
							Element ele = (Element) nodes.item(i);
							String typeVal = "USER";
							NodeList typeEles = ele.getElementsByTagName("Type");
							if(typeEles!=null && typeEles.getLength()>0)
							{
								Element typeEle = (Element) typeEles.item(0);
								typeVal = typeEle.getFirstChild().getNodeValue();
							}
							if("user".equalsIgnoreCase(typeVal))
							{
								NodeList emailNodes = ele.getElementsByTagName("Email");
								for (int j = 0; j < emailNodes.getLength(); j++) {
									String mailId = null;
									if (Objects.nonNull(emailNodes.item(j))
											&& Objects.nonNull(emailNodes.item(j).getFirstChild())) {
										mailId = emailNodes.item(j).getFirstChild().getNodeValue();
									}
									if (Objects.nonNull(mailId) && mailId.length() > 0 && isValidMail(mailId)) {
										emailSet.add(mailId);
									}
								}
								NodeList userIdNodes = ele.getElementsByTagName("UserId");
								for (int j = 0; j < userIdNodes.getLength(); j++) {
									String userId = null;
									if (Objects.nonNull(userIdNodes.item(j))
											&& Objects.nonNull(userIdNodes.item(j).getFirstChild())) {
										userId = userIdNodes.item(j).getFirstChild().getNodeValue();
									}
									if (Objects.nonNull(userId) && userId.length() > 0 ) {
										userIdSet.add(userId);
									}
								}
								
							}
							else if("role".equalsIgnoreCase(typeVal))
							{
								NodeList roleIds = ele.getElementsByTagName("RoleId");
								if(roleIds!=null && roleIds.getLength()>0 )
								{
									Element typeEle = (Element) roleIds.item(0);
									if (Objects.nonNull(roleIds.item(0))
											&& Objects.nonNull(roleIds.item(0).getFirstChild()))
									{
										ldet.setRoleIds(typeEle.getFirstChild().getNodeValue());
									}
								}
								
							}

						}

					}
				}
			}
		}

		Iterator<String> emailIterator = emailSet.iterator();
		String emailApString = "";
		while (emailIterator.hasNext()) {
			String email = emailIterator.next();
			if (!email.isEmpty()) {
				emailApString = emailApString+email+";";
			}
		}
		
		Iterator<String> userIdIterator = userIdSet.iterator();
		String userIdsString = "";
		while (userIdIterator.hasNext()) {
			String usrId = userIdIterator.next();
			if (!usrId.isEmpty()) {
				userIdsString = userIdsString+usrId+";";
			}
		}
		ldet.setUserIds(userIdsString);
		ldet.setEmailIds(emailApString);
        return ldet;
    }
	
	public static String ParseMessageWithInfo(String message, org.w3c.dom.Element infoNode)
    {
		String parsedMsg = message;
		Boolean msgParsed = false;
		if(!"".equalsIgnoreCase(message) && infoNode!=null)
		{
			NodeList detailsNodes = infoNode.getChildNodes();
			for(int j=0; j<detailsNodes.getLength();j++) {
				Node detailNode = detailsNodes.item(j);
				if (detailNode instanceof Element == false)
				{
					continue;
				}
				String formattedNodeName = "[@"+detailNode.getNodeName()+"@]";
				if(parsedMsg.indexOf(formattedNodeName)>=0)
				{
					msgParsed = true;
					parsedMsg = parsedMsg.replace(formattedNodeName, detailNode.getFirstChild().getNodeValue());
				}
			}
		}		
        return msgParsed?parsedMsg:"";
    }
	
	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

}
