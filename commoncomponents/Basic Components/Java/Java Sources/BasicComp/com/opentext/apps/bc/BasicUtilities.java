/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.bc;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.security.encryption.EncryptionException;

import java.text.ParseException;
import java.util.Base64;
import java.util.Date;
import java.text.SimpleDateFormat;

import com.eibus.util.UserProfile;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;

public class BasicUtilities extends BasicUtilitiesBase {
	private static final CordysLogger logger = CordysLogger.getCordysLogger(BasicUtilities.class);

	public BasicUtilities() {
		this((BusObjectConfig) null);
	}

	public BasicUtilities(BusObjectConfig config) {
		super(config);
	}

	public static BusObjectIterator<com.opentext.apps.bc.BasicUtilities> getBasicUtilitiesObjects(String inputDate,
			com.cordys.cpc.bsf.query.Cursor cursor) {
		// TODO implement body
		return null;
	}

	public static String getUTCTime(String inputDate) {
		Date parseDate;
		String timeInUTC;
		SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-ddHH:mm:ss");
		try {
			parseDate = dateFormatter.parse(inputDate);
		} catch (ParseException e) {
			return null;
		}
		timeInUTC = parseDate.toInstant().toString();
		return timeInUTC;
	}

	public static String decodeBase64(String encoded) {
		try {
			String decoded = new String(Base64.getDecoder().decode(encoded));
			return decoded;
		} catch (EncryptionException e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, e.getMessage());
			return null;
		} catch (Exception e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, "An unexpected error occurred: " + e.getMessage());
			return null;
		}
	}

	public static String encryptEncode(String userName, String password, String isPassB64) {
		String encryptedResult;
		try {
			if (isPassB64.equals("true")) {
				String b64Decoded = decodeBase64(password);
				encryptedResult = UserProfile.encryptAndEncode(userName, b64Decoded);
			} else {
				encryptedResult = UserProfile.encryptAndEncode(userName, password);
			}
			return encryptedResult;
		} catch (EncryptionException e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, e.getMessage());
			return null;
		} catch (Exception e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, "An unexpected error occurred: " + e.getMessage());
			return null;
		}
	}

	public static String decryptDecode(String userName, String encryptedPassword) {
		try {
			String decryptedResult = UserProfile.decodeAndDecrypt(userName, encryptedPassword);
			return decryptedResult;
		} catch (EncryptionException e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, e.getMessage());
			return null;
		} catch (Exception e) {
			logger._log("com.opentext.apps.bc", Severity.ERROR, e, "An unexpected error occurred: " + e.getMessage());
			return null;
		}
	}

	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

}
