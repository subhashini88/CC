/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.ccworkflow;

import java.io.IOException;
import java.io.UncheckedIOException;
import java.util.Objects;


import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.eibus.xml.nom.Node;
import com.opentext.apps.ccworkflow.postExecutorJson.ExecutorJsonBody;
import com.opentext.apps.ccworkflow.postExecutorJson.ObligationProcess;
import com.opentext.apps.ccworkflow.rule.CCRuleEngine;
import com.opentext.apps.ccworkflow.rule.utils.NomUtil;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.opentext.apps.ccworkflow.postExecutorJson.CCProcessType;



public class RuleExecutor extends RuleExecutorBase {
	
    private static final ObjectReader objectReader;
    
    private static final ObjectWriter objectWriter;

    private static final ObjectMapper objectMapper;

    static {
        objectMapper = new ObjectMapper();
        objectReader = objectMapper.reader();
        objectWriter = objectMapper.writer();
    }

	public RuleExecutor() {
		this((BusObjectConfig) null);
	}

	public RuleExecutor(BusObjectConfig config) {
		super(config);
	}

	public static BusObjectIterator<com.opentext.apps.ccworkflow.RuleExecutor> getRuleExecutorObjects(
			com.cordys.cpc.bsf.query.Cursor cursor) {
		// TODO implement body
		return null;
	}

	public static int startRuleExecution(String contractId, String processName, int relations, String actionName) {
		CCRuleEngine ruleEngine = new CCRuleEngine();
		if ("CONTRACT_AUTHORING_UPDATE".equals(processName)) {
			return ruleEngine.startRulesExecutionForAuthoring(contractId, relations, false);
		} else if ("CONTRACT_AUTHORING_CREATE".equals(processName)) {
			return ruleEngine.startRulesExecutionForAuthoring(contractId, relations, true);
		} else {
			return ruleEngine.startRulesExecution(contractId, processName, actionName, relations);
		}

	}

	public static int getUserDNFromUsersList(String userName, int userList) {
		int nodes[] = NomUtil.getNodeList(".//GetUsersByWorklistResponse//tuple//old//User", userList);
		int ruleExecutionResultNode = NomUtil.parseXML("<Response></Response>");
		boolean isUserFound = false;
		String userDN = "";
		if (Objects.nonNull(userName) && !userName.isBlank()) {
			for (int userNode : nodes) {
				String tempDN = Node.getDataWithDefault(NomUtil.getNode(".//UserDN", userNode), "");
				if (!tempDN.isBlank()) {
					String[] values = tempDN.split(",");
					if (Objects.nonNull(values) && values.length > 0 && values[0].equals(userName)) {
						isUserFound = true;
						userDN = values[0];
					}
				}
			}
		}
		int userFoundNode = NomUtil.parseXML("<UserFound>" + isUserFound + "</UserFound>");
		int userDNNode = NomUtil.parseXML("<UserDN>" + userDN + "</UserDN>");
		NomUtil.appendChild(ruleExecutionResultNode, userFoundNode);
		NomUtil.appendChild(ruleExecutionResultNode, userDNNode);
		return ruleExecutionResultNode;
	}

        
	
	/**
	 * sample json input body as below { "ccProcessType": "ObligationWorkflow",
	 * "series_of_events": [ "approve", "update" ], "message": { "item": "132",
	 * "Name": "ABC" }, "actions": [ { "pathBPM": "com/a/aa.bpm", "eventName":
	 * "Approveobl", "inputObject": { "item": "12.1", "Name": "child" } } ] }
	 * @param processType
	 * @param inputMsg
	 * @return
	 */
	public static String triggerExecuteProcess(String processType, String actionsToPerform, String otherProps, String inputMsg) {
		if(Objects.nonNull(inputMsg) && !inputMsg.isBlank()) {
		try {
			inputMsg = inputMsg.replaceAll("\n", "").replaceAll("\r", "");
			ExecutorJsonBody parseJsonBody = objectMapper.readValue(inputMsg, ExecutorJsonBody.class);
			String ccTypeProcess = (Objects.nonNull(processType) && processType.isBlank()) ?parseJsonBody.getCCProcessType():processType ;
			ObligationProcess obprocess = new ObligationProcess(processType, actionsToPerform, otherProps,parseJsonBody);
			return obprocess.trigger();
//			if(Objects.nonNull(ccTypeProcess) && !ccTypeProcess.isBlank()) {
//				switch(CCProcessType.valueOf(ccTypeProcess)) {
//				case ObligationWorkflow : 
//					ObligationProcess obprocess = new ObligationProcess(processType, actionsToPerform, otherProps,parseJsonBody);
//					return obprocess.trigger();
//					
//				}
//			}
		} catch (IOException exception) {
			throw new UncheckedIOException(exception);
		}
		}

		return "SKIP";
	}
 
        
	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

}
