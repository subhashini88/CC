/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.gc.contentlibrary;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringEscapeUtils;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;
import com.eibus.xml.nom.Document;
import com.eibus.xml.nom.Node;
import com.eibus.xml.nom.internal.NOMDocumentPool;
import com.opentext.apps.gc.contentlibrary.exceptions.ContentLibAlertMessages;
import com.opentext.apps.gc.contentlibrary.exceptions.ContentLibraryException;
import com.opentext.apps.gc.contentlibrary.model.AbstractGCContainerModel;
import com.opentext.apps.gc.contentlibrary.model.DocGenModelUtil;
import com.opentext.apps.gc.contentlibrary.model.GCClauseContainerModel;
import com.opentext.apps.gc.contentlibrary.model.GCSectionContainerModel;
import com.opentext.apps.gc.custom.ContentLibraryUtils;

public class TemplateDocGeneration extends TemplateDocGenerationBase {
	private static final CordysLogger logger = CordysLogger.getCordysLogger(TemplateDocGeneration.class);

	public TemplateDocGeneration() {
		this((BusObjectConfig) null);
	}

	public TemplateDocGeneration(BusObjectConfig config) {
		super(config);
	}

	public static int GenerateInputXML(String ItemID) {
		Document templateDocument = null;
		int templateIDNode = 0, readTemplateResponse = 0;
		int inputXMLNode = 0;
		NOMDocumentPool nomDocPool = NOMDocumentPool.getInstance();
		templateDocument = nomDocPool.lendDocument();
		try {
			try {
				SOAPRequestObject readContractRequest = new SOAPRequestObject(
						"http://schemas/OpenTextContentLibrary/GCTemplate/operations", "ReadGCTemplate", null, null);
				templateIDNode = templateDocument.createElement("GCTemplate-id");
				Node.createTextElement("ItemId", ItemID, templateIDNode);
				readContractRequest.addParameterAsXml(templateIDNode);
				readTemplateResponse = readContractRequest.sendAndWait();
				logger._log("com.opentext.apps.gc.contentlibrary.TemplateDocGeneration", Severity.INFO, null,
						"Reading template properties completed");
			} catch (Exception e) {
				logger._log("com.opentext.apps.gc.contentlibrary.TemplateDocGeneration", Severity.ERROR, e,
						ContentLibAlertMessages.WEBSERVICE_FAILURE_READ_TEMPLATE);
				throw new ContentLibraryException(ContentLibAlertMessages.WEBSERVICE_FAILURE_READ_TEMPLATE);
			}
			inputXMLNode = createInputXML(readTemplateResponse, templateDocument, ItemID);
		}

		finally {
			ContentLibraryUtils.cleanAll(templateIDNode, readTemplateResponse);
			nomDocPool.returnDocument(templateDocument);
			templateDocument = null;
		}
		return inputXMLNode;
	}

	private static int createInputXML(int readTemplateResponse, Document templateDocument, String templateItemId) {
		String cascadeDoclevelFlag = DocGenModelUtil.CASCADE_CONTINUE;
		int inputLocation = 0, validationInput = 0, mappingNode = 0, templateNode = 0;
		String doclayoutId = Node.getData(
				ContentLibraryUtils.getNode(".//GCTemplate/ContainingDocLayout/DocLayout-id/Id", readTemplateResponse));
		if ("".equals(doclayoutId) || doclayoutId == null) {
			ContentLibraryException exc = new ContentLibraryException(ContentLibAlertMessages.MISSING_DOC_LAYOUT);
			logger._log("com.opentext.apps.gc.contentlibrary.TemplateDocGeneration", Severity.ERROR, exc,
					ContentLibAlertMessages.MISSING_DOC_LAYOUT);
			throw exc;
		}
		try {
			SOAPRequestObject readContractRequest = new SOAPRequestObject(
					"http://schemas.cordys.com/apps/documentgeneration/18.4", "GetValidationInput", null, null);
			inputLocation = templateDocument.createElement("InputLocation");
			Node.setDataElement(inputLocation, "", doclayoutId);
			readContractRequest.addParameterAsXml(inputLocation);
			validationInput = readContractRequest.sendAndWait();
			logger._log("com.opentext.apps.gc.contentlibrary.TemplateDocGeneration", Severity.INFO, null,
					"Reading validation input completed");

			mappingNode = ContentLibraryUtils.getNode(".//Mapping", validationInput);
			if (!Node.isValidNode(mappingNode) || mappingNode == 0) {
				mappingNode = Node.createElement("Mapping", validationInput);
			}

			int repeatableElements = ContentLibraryUtils.getNode(".//RepeatableElements", mappingNode);
			if (!Node.isValidNode(repeatableElements) || repeatableElements == 0) {
				repeatableElements = Node.createElement("RepeatableElements", mappingNode);
			}

			int oldSectionsNode = ContentLibraryUtils.getNode(".//ContentRoot", repeatableElements);
			if (Node.isValidNode(oldSectionsNode) && oldSectionsNode != 0) {
				Node.delete(oldSectionsNode);
			}

			int contractLines = ContentLibraryUtils.getNode(".//ContractLines", repeatableElements);
			if (Node.isValidNode(contractLines) && contractLines != 0) {
				int contractLinesCopy = Node.clone(contractLines, true);
				Node.delete(contractLines);
				Node.appendToChildren(contractLinesCopy, repeatableElements);
			}

			int sectionsNode = Node.createElement("ContentRoot", repeatableElements);
			templateNode = readTemplate(templateItemId, templateDocument);
			String defaultSectionId = Node.getDataWithDefault(ContentLibraryUtils.getNode(
					".//TemplateDetails/Details/GCTemplate/DefaultContainingSection/ContainingSections-id/Id1",
					templateNode), null);
			String styllinAttributes = Node.getDataWithDefault(ContentLibraryUtils
					.getNode(".//TemplateDetails/Details/GCTemplate/StylingAttributes", templateNode),
					DocGenModelUtil.DEFAULT_STYLLING_ATTRIBUTES);

			if (Objects.nonNull(styllinAttributes) && !styllinAttributes.isBlank()) {

				// Numbering style.
				String numberingStyle = DocGenModelUtil.getTokenValue(styllinAttributes,
						DocGenModelUtil.NUMBERING_STYLE);
				numberingStyle = DocGenModelUtil.getAgumentedStyle(numberingStyle);
				Node.setAttribute(sectionsNode, "class", numberingStyle);

				// Cascading information.
				String cascadingInfo = DocGenModelUtil.getTokenValue(styllinAttributes, DocGenModelUtil.CASCADING_INFO);
				if (!cascadingInfo.isBlank()) {
					if (DocGenModelUtil.CASCADE_OFF.equalsIgnoreCase(cascadingInfo)) {
						Node.setAttribute(sectionsNode, "numbering", DocGenModelUtil.CASCADE_OFF);
						cascadeDoclevelFlag = DocGenModelUtil.CASCADE_NEW;
					} else {
						Node.setAttribute(sectionsNode, "numbering", DocGenModelUtil.CASCADE_NEW);
					}
				} else {
					Node.setAttribute(sectionsNode, "numbering", DocGenModelUtil.CASCADE_NEW);
				}
			}

			boolean isNestedStructureThere = (Objects.nonNull(defaultSectionId) && !defaultSectionId.isBlank());
			if (!isNestedStructureThere) {
				int clauseNodes[] = null;
				clauseNodes = ContentLibraryUtils.getNodeList(".//ContainingClauses", templateNode);
				TreeMap<Integer, TreeMap<Integer, Integer>> lSectionMap = new TreeMap<Integer, TreeMap<Integer, Integer>>();
				for (int clNode : clauseNodes) {
					String lSectionOrder = Node
							.getDataWithDefault(ContentLibraryUtils.getNode(".//Owner/SectionOrder", clNode), null);
					String lClauseOrder = Node.getDataWithDefault(ContentLibraryUtils.getNode(".//ClauseOrder", clNode),
							null);
					int clasOrder = (lClauseOrder == null || "".equals(lClauseOrder)) ? 0
							: Integer.parseInt(lClauseOrder);
					int secOrder = (lSectionOrder == null || "".equals(lSectionOrder)) ? 0
							: Integer.parseInt(lSectionOrder);
					TreeMap<Integer, Integer> lClauseMap = lSectionMap.get(secOrder);
					if (lClauseMap == null) {
						lClauseMap = new TreeMap<Integer, Integer>();
						int ownerNode = ContentLibraryUtils.getNode(".//Owner", clNode);
						if (Node.isValidNode(ownerNode) && ownerNode != 0) {
							lSectionMap.put(secOrder, lClauseMap);
						}
					}
					lClauseMap.put(clasOrder, clNode);
				}
				Iterator<Entry<Integer, TreeMap<Integer, Integer>>> lSectIterator = lSectionMap.entrySet().iterator();
				while (lSectIterator.hasNext()) {
					TreeMap<Integer, Integer> lClausMap = lSectIterator.next().getValue();
					Iterator<Entry<Integer, Integer>> lClIterator = lClausMap.entrySet().iterator();
					while (lClIterator.hasNext()) {
						int lClauseNode = lClIterator.next().getValue();
						String clauseID = Node.getDataWithDefault(
								ContentLibraryUtils.getNode(".//LinkedClause/GCClause-id/Id", lClauseNode), null);
						String sectionID = Node.getDataWithDefault(
								ContentLibraryUtils.getNode(".//ContainingClauses-id/Id1", lClauseNode), null);
						String sectionOrder = Node.getDataWithDefault(
								ContentLibraryUtils.getNode(".//Owner/SectionOrder", lClauseNode), null);
						String sectionName = Node
								.getDataWithDefault(ContentLibraryUtils.getNode(".//Owner/Name", lClauseNode), null);
						String clauseName = Node.getDataWithDefault(
								ContentLibraryUtils.getNode(".//LinkedClause/Name", lClauseNode), null);
						String clauseOrder = Node
								.getDataWithDefault(ContentLibraryUtils.getNode(".//ClauseOrder", lClauseNode), null);
						String clauseContent = Node.getDataWithDefault(
								ContentLibraryUtils.getNode(".//LinkedClause/PlainContent", lClauseNode), null);
						String htmlClauseContent = Node.getDataWithDefault(
								ContentLibraryUtils.getNode(".//LinkedClause/HtmlContent", lClauseNode), null);

						if (Objects.nonNull(clauseContent) && Objects.nonNull(htmlClauseContent)) {
							// Parsing clause content to fetch contract metadata tokens
							Pattern pattern = Pattern.compile("\\[#+[a-zA-Z_]+#\\]");// Contract metadata format Search
							Matcher matcher = pattern.matcher(clauseContent);

							// Finds and replaces If atleast one token is found in clause content
							while (matcher.find()) {
								String contractmetadataToken = matcher.group();
								String contractmetadataName = contractmetadataToken
										.substring(2, contractmetadataToken.length() - 2).toUpperCase();
								String contractmetadataValue = Node.getAttribute(ContentLibraryUtils.getNode(
										".//Attribute[@key='" + contractmetadataName + "']", mappingNode), "value");
								if (contractmetadataValue != null) {
									clauseContent = clauseContent.replace(contractmetadataToken, contractmetadataValue);
									htmlClauseContent = htmlClauseContent.replace(contractmetadataToken,
											StringEscapeUtils.escapeHtml4(contractmetadataValue));
								}
							}
							// This code should be altered according the requirement.
							htmlClauseContent = htmlClauseContent
									.replaceAll("style=\"font-family:", "style=\"text-family:")
									.replaceAll("style=\"font-size:", "style=\"text-size:");
						}

						int sectionNode = 0;
						sectionNode = ContentLibraryUtils.getNode(".//Section[SectionID/text()='" + sectionID + "']",
								sectionsNode);
						if (Node.isValidNode(sectionNode) && sectionNode != 0) {
							addClausetoSection(clauseID, sectionNode, clauseName, clauseOrder, clauseContent,
									htmlClauseContent);
						} else {
							sectionNode = addNewSection(clauseID, sectionsNode, sectionID, sectionName, sectionOrder,
									clauseName, clauseOrder, clauseContent, htmlClauseContent);
						}
					}
				}
			} else {

				int allContainerNodes[] = null;
				allContainerNodes = ContentLibraryUtils.getNodeList(".//ContainingClauses", templateNode);
				Map<Integer, AbstractGCContainerModel> allContainerNodesMap = new HashMap<Integer, AbstractGCContainerModel>();
				for (int containerNode : allContainerNodes) {
					AbstractGCContainerModel gcContainerModel = createCCModel(containerNode);
					if (Objects.nonNull(gcContainerModel)) {
						allContainerNodesMap.put(gcContainerModel.getId(), gcContainerModel);
					}

					if (gcContainerModel instanceof GCClauseContainerModel) {
						replaceMetaValuesInHTMLContent((GCClauseContainerModel) gcContainerModel, mappingNode);
					}
				}

				// Base holder for all the containers. at level -1.
				GCSectionContainerModel root = new GCSectionContainerModel();
				root.setLevel(-1);
				root.setCascadingInfo(DocGenModelUtil.CASCADE_CONTINUE);
				root.setContentCascadingInfo(cascadeDoclevelFlag);
				for (AbstractGCContainerModel model : allContainerNodesMap.values()) {
					if (Objects.nonNull(model.getId()) && 0 != model.getId()) {
						if (Objects.nonNull(model.getParentId()) && 0 != model.getParentId()) {
							AbstractGCContainerModel parent = allContainerNodesMap.get(model.getParentId());
							if (Objects.nonNull(parent)) {
								parent.addChildModel(model);
							}
						} else {
							root.addChildModel(model);
						}
					}
				}
				sortAllChildContainersInTree(root);
				formSectionsAndClauses(root, sectionsNode);

			}
			Node.unlink(mappingNode);
		} finally {
			ContentLibraryUtils.cleanAll(inputLocation, validationInput, templateNode);
		}
		return mappingNode;
	}

	private static void sortAllChildContainersInTree(AbstractGCContainerModel root) {
		if (Objects.nonNull(root)) {
			root.sortChildrenContainers();
			for (AbstractGCContainerModel model : root.getChildrenModels()) {
				if (model.getChildrenModels().size() > 0) {
					sortAllChildContainersInTree(model);
				}
			}
		}
	}

	private static void replaceMetaValuesInHTMLContent(GCClauseContainerModel gcContainerModel, int mappingNode) {
		if (Objects.nonNull(gcContainerModel) && Objects.nonNull(gcContainerModel.getContent())) {
			// Parsing clause content to fetch contract metadata tokens
			Pattern pattern = Pattern.compile("\\[#+[a-zA-Z_]+#\\]");// Contract metadata format Search
			Matcher matcher = pattern.matcher(gcContainerModel.getContent());

			// Finds and replaces If at least one token is found in clause content
			while (matcher.find()) {
				String contractmetadataToken = matcher.group();
				String contractmetadataName = contractmetadataToken.substring(2, contractmetadataToken.length() - 2)
						.toUpperCase();
				String contractmetadataValue = Node.getAttribute(
						ContentLibraryUtils.getNode(".//Attribute[@key='" + contractmetadataName + "']", mappingNode),
						"value");
				if (contractmetadataValue != null) {
					gcContainerModel.setContent(
							gcContainerModel.getContent().replace(contractmetadataToken, contractmetadataValue));
					gcContainerModel.setHtmlContent(gcContainerModel.getHtmlContent().replace(contractmetadataToken,
							StringEscapeUtils.escapeHtml4(contractmetadataValue)));
				}

			}
			// This code should be altered according the requirement.
			gcContainerModel.setHtmlContent(
					gcContainerModel.getHtmlContent().replaceAll("style=\"font-family:", "style=\"text-family:")
							.replaceAll("style=\"font-size:", "style=\"text-size:"));
		}
	}

	private static void formSectionsAndClauses(AbstractGCContainerModel root, int sectionsNode) {
		if (Objects.nonNull(root)) {
			for (AbstractGCContainerModel model : root.getChildrenModels()) {
				int containerNode = 0;

				// Checking rule results.
				if (!model.isEligibleForDocument())
					continue;

				if (model instanceof GCSectionContainerModel) {
					containerNode = addSectionToXML((GCSectionContainerModel) model, sectionsNode);
				} else if (model instanceof GCClauseContainerModel) {
					containerNode = addClauseToXML((GCClauseContainerModel) model, sectionsNode);
				}
				if (containerNode != 0 && model.getChildrenModels().size() > 0) {
					formSectionsAndClauses(model, containerNode);
				}
			}
		}
	}

	private static int addSectionToXML(GCSectionContainerModel model, int parentNode) {
		int sectionNode = 0;
		if (Objects.nonNull(model)) {
			sectionNode = Node.createElement("Section", parentNode);
			Node.setAttribute(sectionNode, "level", String.valueOf(model.getLevel()));
			int sectionIDNode = Node.createElement("SectionID", sectionNode);
			Node.setDataElement(sectionIDNode, "", String.valueOf(model.getSectionId()));
			int sectionNameNode = Node.createElement("SectionName", sectionNode);
			Node.setDataElement(sectionNameNode, "", model.getName());
			int sectionOrderNode = Node.createElement("Order", sectionNode);
			Node.setDataElement(sectionOrderNode, "", String.valueOf(model.getOrder()));
			if (Objects.nonNull(model.getNumberingStyle()) && !model.getNumberingStyle().isBlank()) {
				Node.setAttribute(sectionNode, "class", model.getNumberingStyle());
			}
			if (Objects.nonNull(model.getCascadingInfo()) && !model.getCascadingInfo().isBlank()) {
				Node.setAttribute(sectionNode, "numbering", model.getCascadingInfo());
			}
			int stylingAttributes = Node.createElement("StylingAttributes", sectionNode);
			Node.setDataElement(stylingAttributes, "", model.getStyleingAttributes());
		}
		return sectionNode;
	}

	private static int addClauseToXML(GCClauseContainerModel model, int parentNode) {
		int clauseNode = 0;
		if (Objects.nonNull(model) && Objects.nonNull(model.getClauseId()) && model.getClauseId() != 0) {
			clauseNode = Node.createElement("Clause", parentNode);
			Node.setAttribute(clauseNode, "level", String.valueOf(model.getLevel()));
			int clauseNameNode = Node.createElement("ClauseName", clauseNode);
			Node.setDataElement(clauseNameNode, "", model.getName());
			int clauseOrderNode = Node.createElement("Order", clauseNode);
			Node.setDataElement(clauseOrderNode, "", String.valueOf(model.getOrder()));
			int clauseContentNode = Node.createElement("ClauseContent", clauseNode);
			Node.setDataElement(clauseContentNode, "", model.getContent());
			int htmlClauseContentNode = Node.createElement("RTEClauseContent", clauseNode);
			Node.setCDataElement(htmlClauseContentNode, "",
					(Objects.nonNull(model.getHtmlContent())) ? model.getHtmlContent() : "");
			Node.setAttribute(htmlClauseContentNode, "datatype", "html");
			if (Objects.nonNull(model.getNumberingStyle()) && !model.getNumberingStyle().isBlank()) {
				Node.setAttribute(clauseNode, "class", model.getNumberingStyle());
			}
			if (Objects.nonNull(model.getCascadingInfo()) && !model.getCascadingInfo().isBlank()) {
				Node.setAttribute(clauseNode, "numbering", model.getCascadingInfo());
			}
			if (Objects.nonNull(model.getContentCascadingInfo()) && !model.getContentCascadingInfo().isBlank()) {
				Node.setAttribute(htmlClauseContentNode, "numbering", model.getContentCascadingInfo());
			}
			int stylingAttributes = Node.createElement("StylingAttributes", clauseNode);
			Node.setDataElement(stylingAttributes, "", model.getStyleingAttributes());
		}
		return clauseNode;
	}

	private static AbstractGCContainerModel createCCModel(int containerNode) {
		AbstractGCContainerModel gcContainerModel = null;

		String linkedSectionID = Node.getDataWithDefault(
				ContentLibraryUtils.getNode(".//LinkedSection/ContainingSections-id/Id1", containerNode), null);
		if (Objects.nonNull(linkedSectionID) && !linkedSectionID.isBlank()) {
			gcContainerModel = createSectionContainer(containerNode);
		}

		if (Objects.isNull(gcContainerModel)) {
			String linkedClauseID = Node.getDataWithDefault(
					ContentLibraryUtils.getNode(".//LinkedClause/GCClause-id/Id", containerNode), null);
			if (Objects.nonNull(linkedClauseID) && !linkedClauseID.isBlank()) {
				gcContainerModel = createClauseContainer(containerNode);
			}
		}

		if (Objects.nonNull(gcContainerModel)) {

			// Container id.
			String containerId = Node.getDataWithDefault(
					ContentLibraryUtils.getNode(".//ContainingClauses-id/Id2", containerNode), null);
			if (Objects.nonNull(containerId) && !containerId.isBlank()) {
				gcContainerModel.setId(Integer.parseInt(containerId));
			}

			// Parent container id.
			String parentContianerId = Node.getDataWithDefault(
					ContentLibraryUtils.getNode(".//ParentContainer/ContainingClauses-id/Id2", containerNode), null);
			if (Objects.nonNull(parentContianerId) && !parentContianerId.isBlank()) {
				gcContainerModel.setParentId(Integer.parseInt(parentContianerId));
			}
			String styleingAttributes = Node
					.getDataWithDefault(ContentLibraryUtils.getNode(".//StylingAttributes", containerNode), null);
			gcContainerModel.setStyleingAttributes(styleingAttributes);
		}
		return gcContainerModel;
	}

	private static AbstractGCContainerModel createSectionContainer(int containerNode) {
		GCSectionContainerModel model = new GCSectionContainerModel();
		String tempNodeValue = Node.getDataWithDefault(
				ContentLibraryUtils.getNode(".//LinkedSection/ContainingSections-id/Id1", containerNode), null);
		if (Objects.nonNull(tempNodeValue) && !tempNodeValue.isBlank()) {
			model.setSectionId(Integer.parseInt(tempNodeValue));
		}
		tempNodeValue = Node.getDataWithDefault(ContentLibraryUtils.getNode(".//ClauseOrder", containerNode), null);
		if (Objects.nonNull(tempNodeValue) && !tempNodeValue.isBlank()) {
			model.setOrder(Integer.parseInt(tempNodeValue));
		}
		model.setName(
				Node.getDataWithDefault(ContentLibraryUtils.getNode(".//LinkedSection/Name", containerNode), null));
		model.setInitialContainingSectionId(Node.getDataWithDefault(
				ContentLibraryUtils.getNode(".//LinkedSection/InitialContainingSectionID", containerNode), null));
		model.setInitialContainingClauseId(Node
				.getDataWithDefault(ContentLibraryUtils.getNode(".//InitialContainingClauseID", containerNode), null));
		addConditionalClauseContent(model, containerNode);
		return model;
	}

	private static GCClauseContainerModel createClauseContainer(int containerNode) {
		GCClauseContainerModel model = new GCClauseContainerModel();
		String tempNodeValue = Node
				.getDataWithDefault(ContentLibraryUtils.getNode(".//LinkedClause/GCClause-id/Id", containerNode), null);
		if (Objects.nonNull(tempNodeValue) && !tempNodeValue.isBlank()) {
			model.setClauseId(Integer.parseInt(tempNodeValue));
		}
		tempNodeValue = Node.getDataWithDefault(ContentLibraryUtils.getNode(".//ClauseOrder", containerNode), null);
		if (Objects.nonNull(tempNodeValue) && !tempNodeValue.isBlank()) {
			model.setOrder(Integer.parseInt(tempNodeValue));
		}
		model.setName(
				Node.getDataWithDefault(ContentLibraryUtils.getNode(".//LinkedClause/Name", containerNode), null));
		model.setContent(Node
				.getDataWithDefault(ContentLibraryUtils.getNode(".//LinkedClause/PlainContent", containerNode), null));
		model.setHtmlContent(Node
				.getDataWithDefault(ContentLibraryUtils.getNode(".//LinkedClause/HtmlContent", containerNode), null));
		model.setInitialContainingClauseId(Node
				.getDataWithDefault(ContentLibraryUtils.getNode(".//InitialContainingClauseID", containerNode), null));
		addConditionalClauseContent(model, containerNode);
		return model;
	}

	private static void addClausetoSection(String clauseID, int sectionNode, String clauseName, String clauseOrder,
			String clauseContent, String htmlClauseContent) {
		if (clauseID != null) {
			int clauseNode = Node.createElement("Clause", sectionNode);
			Node.setAttribute(clauseNode, "level", "1");
			int clauseNameNode = Node.createElement("ClauseName", clauseNode);
			Node.setDataElement(clauseNameNode, "", clauseName);
			int clauseOrderNode = Node.createElement("ClauseOrder", clauseNode);
			Node.setDataElement(clauseOrderNode, "", clauseOrder);
			int clauseContentNode = Node.createElement("ClauseContent", clauseNode);
			Node.setDataElement(clauseContentNode, "", clauseContent);
			int htmlClauseContentNode = Node.createElement("RTEClauseContent", clauseNode);
			Node.setAttribute(clauseNode, "numbering", DocGenModelUtil.CASCADE_CONTINUE);
			Node.setCDataElement(htmlClauseContentNode, "",
					Objects.nonNull(htmlClauseContent) ? htmlClauseContent : "");
			Node.setAttribute(htmlClauseContentNode, "datatype", "html");
			Node.setAttribute(htmlClauseContentNode, "numbering", DocGenModelUtil.CASCADE_NEW);
		}
	}

	private static int addNewSection(String clauseID, int sectionsNode, String sectionID, String sectionName,
			String sectionOrder, String clauseName, String clauseOrder, String clauseContent,
			String htmlClauseContent) {
		int sectionNode = Node.createElement("Section", sectionsNode);
		Node.setAttribute(sectionNode, "level", "0");
		int sectionIDNode = Node.createElement("SectionID", sectionNode);
		Node.setDataElement(sectionIDNode, "", sectionID);
		int sectionNameNode = Node.createElement("SectionName", sectionNode);
		Node.setDataElement(sectionNameNode, "", sectionName);
		int sectionOrderNode = Node.createElement("SectionOrder", sectionNode);
		Node.setDataElement(sectionOrderNode, "", sectionOrder);
		Node.setAttribute(sectionNode, "numbering", DocGenModelUtil.CASCADE_CONTINUE);
		addClausetoSection(clauseID, sectionNode, clauseName, clauseOrder, clauseContent, htmlClauseContent);
		return sectionNode;
	}

	private static int readTemplate(String ItemID, Document templateDocument) {
		int templateIDNode = 0, readTemplateResponse = 0;
		try {
			SOAPRequestObject readTemplateDetailsRequest = new SOAPRequestObject(
					"http://schemas/OpenTextContentLibrary/16.5", "GetTemplateDetails", null, null);
			templateIDNode = templateDocument.createElement("TemplateItemId");
			Node.setDataElement(templateIDNode, "", ItemID);
			readTemplateDetailsRequest.addParameterAsXml(templateIDNode);
			readTemplateResponse = readTemplateDetailsRequest.sendAndWait();
			logger._log("com.opentext.apps.gc.contentlibrary.TemplateDocGeneration", Severity.INFO, null,
					"Get template details service executed successfully");
		} catch (Exception e) {
			logger._log("com.opentext.apps.gc.contentlibrary.TemplateDocGeneration", Severity.ERROR, e,
					ContentLibAlertMessages.MISSING_DOC_LAYOUT);
			throw new ContentLibraryException(ContentLibAlertMessages.MISSING_DOC_LAYOUT);
		} finally {
			ContentLibraryUtils.cleanAll(templateIDNode);
		}
		return readTemplateResponse;
	}

	public static int getSaveTemplateRequest(String ItemID) {
		int sectionsNode = 0;
		NOMDocumentPool nomDocPool = NOMDocumentPool.getInstance();
		Document templateDocument = nomDocPool.lendDocument();
		try {
			if (Objects.nonNull(ItemID) && !ItemID.isBlank()) {
				int templateNode = readTemplate(ItemID, templateDocument);
				String defaultSectionId = Node.getDataWithDefault(ContentLibraryUtils.getNode(
						".//TemplateDetails/Details/GCTemplate/DefaultContainingSection/ContainingSections-id/Id1",
						templateNode), null);

				Map<String, String> latestClauseVersions = getLatestClauseVersions(ItemID, templateDocument);
				boolean isNestedStructureThere = (Objects.nonNull(defaultSectionId) && !defaultSectionId.isBlank());

				sectionsNode = templateDocument.createElement("Containers");
				if (!isNestedStructureThere) {
					int clauseNodes[] = null;
					clauseNodes = ContentLibraryUtils.getNodeList(".//ContainingClauses", templateNode);
					TreeMap<Integer, TreeMap<Integer, Integer>> lSectionMap = new TreeMap<Integer, TreeMap<Integer, Integer>>();
					for (int clNode : clauseNodes) {
						String lSectionOrder = Node
								.getDataWithDefault(ContentLibraryUtils.getNode(".//Owner/SectionOrder", clNode), null);
						String lClauseOrder = Node
								.getDataWithDefault(ContentLibraryUtils.getNode(".//ClauseOrder", clNode), null);
						int clasOrder = (lClauseOrder == null || "".equals(lClauseOrder)) ? 0
								: Integer.parseInt(lClauseOrder);
						int secOrder = (lSectionOrder == null || "".equals(lSectionOrder)) ? 0
								: Integer.parseInt(lSectionOrder);
						TreeMap<Integer, Integer> lClauseMap = lSectionMap.get(secOrder);
						if (lClauseMap == null) {
							lClauseMap = new TreeMap<Integer, Integer>();
							int ownerNode = ContentLibraryUtils.getNode(".//Owner", clNode);
							if (Node.isValidNode(ownerNode) && ownerNode != 0) {
								lSectionMap.put(secOrder, lClauseMap);
							}
						}
						lClauseMap.put(clasOrder, clNode);
					}
					Iterator<Entry<Integer, TreeMap<Integer, Integer>>> lSectIterator = lSectionMap.entrySet()
							.iterator();
					while (lSectIterator.hasNext()) {
						TreeMap<Integer, Integer> lClausMap = lSectIterator.next().getValue();
						Iterator<Entry<Integer, Integer>> lClIterator = lClausMap.entrySet().iterator();
						while (lClIterator.hasNext()) {
							int lClauseNode = lClIterator.next().getValue();
							String sectionID = Node.getDataWithDefault(
									ContentLibraryUtils.getNode(".//ContainingClauses-id/Id1", lClauseNode), null);
							int sectionNode = 0;
							sectionNode = ContentLibraryUtils.getNode(
									".//Container[ContainingClauseID/text()='New_" + sectionID + "']", sectionsNode);
							if (sectionNode == 0) {
								addSectionContainerOld(sectionsNode, lClauseNode);
							}
							String linkedClauseID = Node.getDataWithDefault(
									ContentLibraryUtils.getNode(".//LinkedClause/GCClause-id/Id", lClauseNode), null);
							if (Objects.nonNull(linkedClauseID) && !linkedClauseID.isBlank()) {
								addClauseContainerOld(sectionsNode, lClauseNode, latestClauseVersions);
							}
						}
					}
				} else {

					int allContainerNodes[] = null;
					allContainerNodes = ContentLibraryUtils.getNodeList(".//ContainingClauses", templateNode);
					Map<Integer, AbstractGCContainerModel> allContainerNodesMap = new HashMap<Integer, AbstractGCContainerModel>();
					for (int containerNode : allContainerNodes) {
						AbstractGCContainerModel gcContainerModel = createCCModel(containerNode);
						if (Objects.nonNull(gcContainerModel)) {
							allContainerNodesMap.put(gcContainerModel.getId(), gcContainerModel);
						}
					}

					// Base holder for all the containers. at level -1.
					GCSectionContainerModel root = new GCSectionContainerModel();
					root.setLevel(-1);
					for (AbstractGCContainerModel model : allContainerNodesMap.values()) {
						if (Objects.nonNull(model.getId()) && 0 != model.getId()) {
							if (Objects.nonNull(model.getParentId()) && 0 != model.getParentId()) {
								AbstractGCContainerModel parent = allContainerNodesMap.get(model.getParentId());
								if (Objects.nonNull(parent)) {
									parent.addChildModel(model);
								}
							} else {
								root.addChildModel(model);
							}
						}
					}

					sortAllChildContainersInTree(root);
					formContainers(root, sectionsNode, latestClauseVersions);

				}
				ContentLibraryUtils.cleanAll(templateNode);
			}
		} catch (Exception e) {
			logger._log("com.opentext.apps.gc.contentlibrary.TemplateDocGeneration", Severity.ERROR, e,
					ContentLibAlertMessages.ERROR_WHILE_GENERATING_INPUT_REQUEST);
			throw new ContentLibraryException(ContentLibAlertMessages.ERROR_WHILE_GENERATING_INPUT_REQUEST);
		} finally {
			nomDocPool.returnDocument(templateDocument);
			templateDocument = null;
		}

		return sectionsNode;
	}

	private static Map<String, String> getLatestClauseVersions(String itemID, Document templateDocument) {

		int templateIDNode = 0, latestClausesNode = 0;
		Map<String, String> latestClauseVersions = new HashMap<String, String>();
		try {
			SOAPRequestObject readTemplateDetailsRequest = new SOAPRequestObject(
					"http://schemas.opentext.com/apps/contentlibrary/19.2", "GetAllOtherActiveClauseVerions", null,
					null);
			templateIDNode = templateDocument.createElement("TemplateItemID");
			Node.setDataElement(templateIDNode, "", itemID);
			readTemplateDetailsRequest.addParameterAsXml(templateIDNode);
			latestClausesNode = readTemplateDetailsRequest.sendAndWait();

			int clauseNodes[] = null;
			clauseNodes = ContentLibraryUtils.getNodeList(".//versionDetails", latestClausesNode);
			for (int clauseNode : clauseNodes) {
				String clauseItemID = Node
						.getDataWithDefault(ContentLibraryUtils.getNode(".//Clause/itemId", clauseNode), null);
				String latestClauseItemID = Node
						.getDataWithDefault(ContentLibraryUtils.getNode(".//LatestClause/itemId", clauseNode), null);
				if (Objects.nonNull(clauseItemID) && Objects.nonNull(latestClauseItemID) && !clauseItemID.isBlank()
						&& !latestClauseItemID.isBlank()) {
					latestClauseVersions.put(clauseItemID.substring(clauseItemID.indexOf(".") + 1),
							latestClauseItemID.substring(latestClauseItemID.indexOf(".") + 1));
				}
			}

		} catch (Exception e) {
			throw new ContentLibraryException(ContentLibAlertMessages.ERROR_WHILE_GETTING_LATEST_CLAUSE_VERSIONS);
		} finally {
			ContentLibraryUtils.cleanAll(templateIDNode, latestClausesNode);
		}
		return latestClauseVersions;
	}

	private static void addSectionContainerOld(int sectionsNode, int lClauseNode) {
		int continerNode = Node.createElement("Container", sectionsNode);
		Node.setAttribute(continerNode, "type", "SECTION");
		Node.setDataElement(continerNode, "Order",
				Node.getDataWithDefault(ContentLibraryUtils.getNode(".//Owner/SectionOrder", lClauseNode), null));
		Node.setDataElement(continerNode, "SectionName",
				Node.getDataWithDefault(ContentLibraryUtils.getNode(".//Owner/Name", lClauseNode), null));
		Node.setDataElement(continerNode, "StylingAttributes",
				Node.getDataWithDefault(ContentLibraryUtils.getNode(".//StylingAttributes", lClauseNode), null));
		Node.setDataElement(continerNode, "InitialContainingSectionID", Node
				.getDataWithDefault(ContentLibraryUtils.getNode(".//InitialContainingSectionID", lClauseNode), null));
		String containingClauseId = Node
				.getDataWithDefault(ContentLibraryUtils.getNode(".//ContainingClauses-id/Id1", lClauseNode), null);
		if (Objects.nonNull(containingClauseId) && !containingClauseId.isBlank()) {
			Node.setDataElement(continerNode, "ContainingClauseID", "New_" + containingClauseId);
		}

	}

	private static void addClauseContainerOld(int sectionsNode, int lClauseNode,
			Map<String, String> latestClauseVersions) {
		int continerNode = Node.createElement("Container", sectionsNode);
		Node.setAttribute(continerNode, "type", "CLAUSE");
		Node.setDataElement(continerNode, "Order",
				Node.getDataWithDefault(ContentLibraryUtils.getNode(".//ClauseOrder", lClauseNode), null));
		String linkedClauseID = Node
				.getDataWithDefault(ContentLibraryUtils.getNode(".//LinkedClause/GCClause-id/Id", lClauseNode), null);
		if (Objects.nonNull(linkedClauseID) && Objects.nonNull(latestClauseVersions)
				&& latestClauseVersions.containsKey(linkedClauseID)) {
			linkedClauseID = latestClauseVersions.get(linkedClauseID);
		}
		Node.setDataElement(continerNode, "LinkedClauseID", linkedClauseID);
		Node.setDataElement(continerNode, "ClauseName",
				Node.getDataWithDefault(ContentLibraryUtils.getNode(".//LinkedClause/Name", lClauseNode), null));
		Node.setDataElement(continerNode, "InitialContainingClauseID", Node
				.getDataWithDefault(ContentLibraryUtils.getNode(".//InitialContainingClauseID", lClauseNode), null));
		Node.setDataElement(continerNode, "StylingAttributes",
				Node.getDataWithDefault(ContentLibraryUtils.getNode(".//StylingAttributes", lClauseNode), null));
		String parentContainerID = Node
				.getDataWithDefault(ContentLibraryUtils.getNode(".//ContainingClauses-id/Id1", lClauseNode), null);
		if (Objects.nonNull(parentContainerID) && !parentContainerID.isBlank()) {
			Node.setDataElement(continerNode, "ParentContainerID", "New_" + parentContainerID);
		}

	}

	private static void addSectionContainerNew(GCSectionContainerModel model, int sectionsNode) {
		int continerNode = Node.createElement("Container", sectionsNode);
		Node.setAttribute(continerNode, "type", "SECTION");
		Node.setDataElement(continerNode, "Order", String.valueOf(model.getOrder()));
		Node.setDataElement(continerNode, "SectionName", model.getName());
		Node.setDataElement(continerNode, "StylingAttributes", model.getStyleingAttributes());
		Node.setDataElement(continerNode, "InitialContainingSectionID", model.getInitialContainingSectionId());
		Node.setDataElement(continerNode, "InitialContainingClauseID", model.getInitialContainingClauseId());
		if (Objects.nonNull(model.getParentId()) && 0 != model.getParentId()) {
			Node.setDataElement(continerNode, "ParentContainerID", "New_" + model.getParentId());
		}
		if (Objects.nonNull(model.getId()) && 0 != model.getId()) {
			Node.setDataElement(continerNode, "ContainingClauseID", "New_" + model.getId());
		}
	}

	private static void addClauseContainerNew(GCClauseContainerModel model, int sectionsNode) {
		int continerNode = Node.createElement("Container", sectionsNode);
		Node.setAttribute(continerNode, "type", "CLAUSE");
		Node.setDataElement(continerNode, "Order", String.valueOf(model.getOrder()));
		Node.setDataElement(continerNode, "LinkedClauseID", String.valueOf(model.getClauseId()));
		Node.setDataElement(continerNode, "ClauseName", model.getName());
		Node.setDataElement(continerNode, "InitialContainingClauseID", model.getInitialContainingClauseId());
		Node.setDataElement(continerNode, "StylingAttributes", model.getStyleingAttributes());
		if (Objects.nonNull(model.getParentId()) && 0 != model.getParentId()) {
			Node.setDataElement(continerNode, "ParentContainerID", "New_" + model.getParentId());
		}
		if (Objects.nonNull(model.getId()) && 0 != model.getId()) {
			Node.setDataElement(continerNode, "ContainingClauseID", "New_" + model.getId());
		}
	}

	private static void formContainers(AbstractGCContainerModel root, int sectionsNode,
			Map<String, String> latestClauseVersions) {
		if (Objects.nonNull(root)) {
			for (AbstractGCContainerModel model : root.getChildrenModels()) {
				if (model instanceof GCSectionContainerModel) {
					addSectionContainerNew((GCSectionContainerModel) model, sectionsNode);
				} else if (model instanceof GCClauseContainerModel) {
					GCClauseContainerModel clauseModel = (GCClauseContainerModel) model;
					if (Objects.nonNull(latestClauseVersions) && Objects.nonNull(clauseModel.getClauseId())
							&& latestClauseVersions.containsKey(String.valueOf(clauseModel.getClauseId()))) {
						clauseModel.setClauseId(
								Integer.parseInt(latestClauseVersions.get(String.valueOf(clauseModel.getClauseId()))));
					}
					addClauseContainerNew(clauseModel, sectionsNode);
				}
				if (model.getChildrenModels().size() > 0) {
					formContainers(model, sectionsNode, latestClauseVersions);
				}
			}
		}
	}

	private static void addConditionalClauseContent(AbstractGCContainerModel model, int containerNode) {
		if (Objects.nonNull(model)) {
			String conditionalAction = Node
					.getDataWithDefault(ContentLibraryUtils.getNode(".//RelatedCondition/Action", containerNode), null);
			if (Objects.nonNull(conditionalAction) && !conditionalAction.isBlank()) {
				switch (conditionalAction.toUpperCase()) {
				case DocGenModelUtil.CONDITIONAL_ACTION_HIDE:
					model.setEligibleForDocument(true);
					model.setConditionAction(conditionalAction.toUpperCase());
					break;
				case DocGenModelUtil.CONDITIONAL_ACTION_REPLACE:
				case DocGenModelUtil.CONDITIONAL_ACTION_ADD_AFTER:
				case DocGenModelUtil.CONDITIONAL_ACTION_ADD_BEFORE:
					model.setEligibleForDocument(false);
					model.setConditionAction(conditionalAction.toUpperCase());
					break;
				}
				String tempNodeValue = Node.getDataWithDefault(ContentLibraryUtils
						.getNode(".//RelatedCondition/SourceContainer/ContainingClauses-id/Id2", containerNode), null);
				if (Objects.nonNull(tempNodeValue) && !tempNodeValue.isBlank()) {
					model.setSourceContainerId(Integer.parseInt(tempNodeValue));
				}
				tempNodeValue = Node.getDataWithDefault(ContentLibraryUtils
						.getNode(".//RelatedCondition/TargetContainer/ContainingClauses-id/Id2", containerNode), null);
				if (Objects.nonNull(tempNodeValue) && !tempNodeValue.isBlank()) {
					model.setTargetContainerId(Integer.parseInt(tempNodeValue));
				}
				tempNodeValue = Node.getDataWithDefault(
						ContentLibraryUtils.getNode(".//RelatedCondition/ConditionRule/Rule-id/Id", containerNode),
						null);
				if (Objects.nonNull(tempNodeValue) && !tempNodeValue.isBlank()) {
					model.setRuleId(Integer.parseInt(tempNodeValue));
				}
			}
		}

	}

	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

}
