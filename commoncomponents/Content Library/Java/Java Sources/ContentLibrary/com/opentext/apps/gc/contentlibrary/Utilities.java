/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.gc.contentlibrary;

import java.io.UnsupportedEncodingException;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.eibus.util.Util;
import com.eibus.util.logger.CordysLogger;
import com.eibus.xml.nom.Node;
import com.eibus.xml.nom.XMLException;
import com.eibus.xml.xpath.XPath;


public class Utilities extends UtilitiesBase
{
	private static final CordysLogger LOGGER = CordysLogger.getCordysLogger(Utilities.class);
    public Utilities()
    {
        this((BusObjectConfig)null);
    }

    public Utilities(BusObjectConfig config)
    {
        super(config);
    }

    public static BusObjectIterator<com.opentext.apps.gc.contentlibrary.Utilities> getUtilitiesObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }


	
	public static int getNode(final String expression, final int node) {
		return XPath.getFirstMatch(expression, null, node);
	}
    
	public static void setAttribute(final int node, String attributeName, String attributeValue) {
		Node.setAttribute(node, attributeName, attributeValue);
	}
	
	public static int parseXML(final String xml)
	  {
		  int node = 0;
		  try 
		  {
			  node = BSF.getXMLDocument().load(xml.getBytes("UTF-8"));
		  } 
		  catch (XMLException | UnsupportedEncodingException e) 
		  {
		  			    
		    throw new RuntimeException();
		  }
		  
		  return node;
	  }
	
	 public static void cleanAll(final int... nodes) {
			for (final int node : nodes) {
				if (node != 0 && Node.isValidNode(node)) {
					if (Node.getParent(node) > 0)
						Node.unlink(node);
					Node.delete(node);
				}
			}
		}
	 
	 public static boolean isStringEmpty(final String value) {
			return Util.isStringEmpty(value);
		}
	 
	 public static int setData(final int node, String value) {

		return Node.setDataElement(node, "", value);
	}

	 public static int setData(int node, final String expression, String value) {
		int firstChild = getNode(expression, node);
		return setData(firstChild, value);
	}
	
	 public static int appendChild(final int child, final int parent) {
		return Node.appendToChildren(child, parent);

	}
	 
    public void onInsert()
    {
    }

    public void onUpdate()
    {
    }

    public void onDelete()
    {
    }

}
